diff --git a/dashboard/__init__.py b/dashboard/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/dashboard/api/__init__.py b/dashboard/api/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/dashboard/api/orders.py b/dashboard/api/orders.py
new file mode 100644
index 0000000..d175324
--- /dev/null
+++ b/dashboard/api/orders.py
@@ -0,0 +1,42 @@
+"""
+Enhanced Trading Bot Dashboard - API Orders
+"""
+
+from flask import Blueprint, jsonify
+from datetime import datetime
+
+orders_bp = Blueprint('orders', __name__)
+
+@orders_bp.route('/orders')
+def get_orders():
+    """Ordres OCO actifs"""
+    try:
+        from ..utils.data_provider import data_provider
+        
+        orders = data_provider.get_active_orders()
+        return jsonify({
+            'orders': orders
+        })
+        
+    except Exception as e:
+        print(f"❌ Erreur orders: {e}")
+        return jsonify({
+            'orders': [],
+            'error': str(e)
+        })
+
+@orders_bp.route('/orders/history')
+def get_orders_history():
+    """Historique des ordres"""
+    try:
+        from ..utils.data_provider import data_provider
+        history = data_provider.get_orders_history(limit=100)
+        return jsonify({
+            'orders': history
+        })
+        
+    except Exception as e:
+        return jsonify({
+            'orders': [],
+            'error': str(e)
+        })
diff --git a/dashboard/api/portfolio.py b/dashboard/api/portfolio.py
new file mode 100644
index 0000000..9542152
--- /dev/null
+++ b/dashboard/api/portfolio.py
@@ -0,0 +1,33 @@
+"""
+Enhanced Trading Bot Dashboard - API Portfolio
+"""
+
+from flask import Blueprint, jsonify
+from ..utils.data_provider import data_provider
+
+portfolio_bp = Blueprint('portfolio', __name__)
+
+@portfolio_bp.route('/portfolio')
+def get_portfolio():
+    """Informations du portefeuille avec VRAIES données Binance"""
+    try:
+        portfolio_data = data_provider.get_portfolio_summary()
+        return jsonify(portfolio_data)
+        
+    except Exception as e:
+        return jsonify({'error': str(e)}), 500
+
+@portfolio_bp.route('/portfolio/performance')
+def get_portfolio_performance():
+    """Performances du portefeuille"""
+    try:
+        return jsonify(data_provider.get_portfolio_performance())
+        
+    except Exception as e:
+        return jsonify({
+            'today': 0,
+            '7d': 0,
+            '30d': 0,
+            'total': 0,
+            'error': str(e)
+        }), 500
diff --git a/dashboard/api/stats.py b/dashboard/api/stats.py
new file mode 100644
index 0000000..e1ad943
--- /dev/null
+++ b/dashboard/api/stats.py
@@ -0,0 +1,51 @@
+"""
+Enhanced Trading Bot Dashboard - API Stats
+"""
+
+from flask import Blueprint, jsonify, request
+from datetime import datetime
+
+stats_bp = Blueprint('stats', __name__)
+
+@stats_bp.route('/stats')
+def get_stats():
+    """Statistiques générales du bot"""
+    try:
+        # Import ici pour éviter les erreurs circulaires
+        from ..utils.data_provider import data_provider
+        
+        stats = data_provider.get_quick_stats()
+        return jsonify(stats)
+        
+    except Exception as e:
+        print(f"❌ Erreur stats: {e}")
+        return jsonify({
+            'error': str(e),
+            'daily_buys': 0,
+            'active_oco': 0,
+            'total_transactions': 0,
+            'bot_status': 'error',
+            'timestamp': datetime.now().isoformat()
+        })
+
+@stats_bp.route('/stats/transactions')
+def get_recent_transactions():
+    """Transactions récentes"""
+    try:
+        from ..utils.data_provider import data_provider
+        
+        # Paramètres optionnels
+        limit = request.args.get('limit', default=20, type=int)
+        period = request.args.get('period', default=None, type=str)
+        
+        transactions = data_provider.get_recent_transactions(limit=limit, period=period)
+        return jsonify({
+            'transactions': transactions
+        })
+        
+    except Exception as e:
+        print(f"❌ Erreur transactions: {e}")
+        return jsonify({
+            'transactions': [],
+            'error': str(e)
+        })
diff --git a/dashboard/api/system.py b/dashboard/api/system.py
new file mode 100644
index 0000000..85b75bf
--- /dev/null
+++ b/dashboard/api/system.py
@@ -0,0 +1,18 @@
+"""
+Enhanced Trading Bot Dashboard - Endpoints système
+"""
+
+from flask import Blueprint, jsonify
+from datetime import datetime
+
+system_bp = Blueprint('system', __name__)
+
+@system_bp.route('/health')
+def health_check():
+    """Vérification de santé du service"""
+    return jsonify({
+        'status': 'ok',
+        'service': 'Enhanced Trading Bot Dashboard',
+        'version': '1.0.0',
+        'timestamp': datetime.now().isoformat()
+    })
diff --git a/dashboard/app.py b/dashboard/app.py
new file mode 100644
index 0000000..7bb120f
--- /dev/null
+++ b/dashboard/app.py
@@ -0,0 +1,53 @@
+"""
+Enhanced Trading Bot Dashboard - Application Flask
+"""
+
+from flask import Flask, render_template, jsonify
+import os
+import sys
+from pathlib import Path
+
+# Ajouter le dossier racine pour accès aux modules src
+root_path = Path(__file__).parent.parent
+sys.path.insert(0, str(root_path))
+
+def create_app():
+    """Factory pour créer l'app Flask"""
+    
+    app = Flask(__name__)
+    app.config['SECRET_KEY'] = 'trading-bot-dashboard-2024'
+    
+    # Import des modules API
+    from .api.stats import stats_bp
+    from .api.portfolio import portfolio_bp  
+    from .api.orders import orders_bp
+    from .api.system import system_bp
+    
+    # Enregistrement des blueprints API
+    app.register_blueprint(stats_bp, url_prefix='/api')
+    app.register_blueprint(portfolio_bp, url_prefix='/api')
+    app.register_blueprint(orders_bp, url_prefix='/api')
+    app.register_blueprint(system_bp, url_prefix='/api')
+    
+    # Routes principales
+    @app.route('/')
+    def index():
+        """Page d'accueil du dashboard"""
+        return render_template('index.html')
+    
+    @app.route('/portfolio')
+    def portfolio_page():
+        """Page portefeuille détaillé"""
+        return render_template('portfolio.html')
+    
+    @app.route('/orders')
+    def orders_page():
+        """Page ordres OCO"""
+        return render_template('orders.html')
+    
+    @app.route('/transactions')
+    def transactions_page():
+        """Page transactions"""
+        return render_template('transactions.html')
+    
+    return app
diff --git a/dashboard/static/css/dashboard.css b/dashboard/static/css/dashboard.css
new file mode 100644
index 0000000..fe34539
--- /dev/null
+++ b/dashboard/static/css/dashboard.css
@@ -0,0 +1,1224 @@
+/* Variables CSS modernes UNIFIÉES */
+:root {
+    --primary-color: #6366f1;
+    --secondary-color: #8b5cf6;
+    --success-color: #22c55e;
+    --warning-color: #f59e0b;
+    --error-color: #ef4444;
+    --background: #f8fafc;
+    --card-background: #ffffff;
+    --text-primary: #1f2937;
+    --text-secondary: #6b7280;
+    --text-muted: #9ca3af;
+    --border-color: #e5e7eb;
+    --border-radius: 12px;
+    --shadow-sm: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
+    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
+    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
+    --nav-height: 80px;
+}
+
+/* Base styles UNIFIÉS */
+* {
+    box-sizing: border-box;
+
+}
+
+body {
+    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
+    color: var(--text-primary);
+    line-height: 1.6;
+    margin: 0;
+    padding: 0;
+    background: var(--background);
+    font-size: 14px;
+    padding-top: var(--nav-height);
+}
+
+/* Navigation principale UNIFIÉE */
+.main-nav {
+    background: linear-gradient(135deg, var(--text-primary), #374151);
+    color: white;
+    padding: 1.2rem 2rem;
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    box-shadow: var(--shadow-lg);
+    position: fixed;
+    top: 0;
+    left: 0;
+    right: 0;
+    z-index: 1000;
+    height: var(--nav-height);
+    backdrop-filter: blur(10px);
+}
+
+.nav-brand {
+    display: flex;
+    align-items: center;
+    gap: 1.5rem;
+    font-weight: 700;
+    font-size: 1.4rem;
+    color: #ffffff;
+}
+
+.brand-icon {
+    font-size: 2rem;
+    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));
+}
+
+.brand-text {
+    color: #ffffff;
+    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
+}
+
+.status-indicator-wrapper {
+    display: flex;
+    align-items: center;
+    gap: 0.75rem;
+    margin-left: 2rem;
+    padding: 0.6rem 1.2rem;
+    background: rgba(255, 255, 255, 0.15);
+    border-radius: 25px;
+    font-size: 1rem;
+    font-weight: 600;
+    color: #ffffff;
+    backdrop-filter: blur(10px);
+    border: 1px solid rgba(255, 255, 255, 0.2);
+}
+
+.status-dot {
+    width: 12px;
+    height: 12px;
+    border-radius: 50%;
+    background: #9ca3af;
+    transition: all 0.3s ease;
+    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3);
+}
+
+.status-dot.active {
+    background: var(--success-color);
+    box-shadow: 0 0 12px rgba(34, 197, 94, 0.8), 0 0 0 2px rgba(34, 197, 94, 0.3);
+}
+
+.status-dot.idle {
+    background: var(--warning-color);
+    box-shadow: 0 0 12px rgba(245, 158, 11, 0.8), 0 0 0 2px rgba(245, 158, 11, 0.3);
+}
+
+.status-dot.error {
+    background: var(--error-color);
+    box-shadow: 0 0 12px rgba(239, 68, 68, 0.8), 0 0 0 2px rgba(239, 68, 68, 0.3);
+}
+
+.status-text {
+    color: #ffffff;
+    font-weight: 600;
+    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
+}
+
+.nav-links {
+    display: flex;
+    gap: 1rem;
+}
+
+.nav-link {
+    color: #ffffff;
+    text-decoration: none;
+    padding: 0.8rem 1.5rem;
+    border-radius: 10px;
+    transition: all 0.3s ease;
+    font-size: 1.1rem;
+    font-weight: 600;
+    display: flex;
+    align-items: center;
+    gap: 0.75rem;
+    background: rgba(255, 255, 255, 0.1);
+    border: 1px solid rgba(255, 255, 255, 0.15);
+    backdrop-filter: blur(10px);
+    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
+}
+
+.nav-link:hover {
+    background: rgba(255, 255, 255, 0.25);
+    transform: translateY(-2px);
+    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
+    border-color: rgba(255, 255, 255, 0.3);
+}
+
+/* Layout principal UNIFIÉ */
+.dashboard-container,
+.portfolio-container {
+    max-width: 1400px;
+    margin: 0 auto;
+    padding: 2rem;
+    min-height: calc(100vh - var(--nav-height));
+}
+
+/* En-tête UNIFIÉ */
+.page-header {
+    margin-bottom: 2rem;
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    flex-wrap: wrap;
+    gap: 1rem;
+    padding: 1.5rem 0;
+    border-bottom: 2px solid var(--border-color);
+}
+
+.page-header h1 {
+    font-size: 2.2rem;
+    font-weight: 700;
+    color: var(--text-primary);
+    margin: 0;
+    display: flex;
+    align-items: center;
+    gap: 0.75rem;
+    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
+    background-clip: text;
+    -webkit-background-clip: text;
+    -webkit-text-fill-color: transparent;
+}
+
+.last-update {
+    display: flex;
+    align-items: center;
+    gap: 1rem;
+    color: var(--text-secondary);
+    font-size: 0.9rem;
+    padding: 0.75rem 1.25rem;
+    background: var(--card-background);
+    border-radius: 10px;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+}
+
+.refresh-btn {
+    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
+    color: white;
+    border: none;
+    border-radius: 8px;
+    padding: 0.6rem 1.2rem;
+    cursor: pointer;
+    font-size: 0.9rem;
+    transition: all 0.3s ease;
+    font-weight: 600;
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+.refresh-btn:hover {
+    transform: translateY(-2px);
+    box-shadow: 0 8px 16px rgba(99, 102, 241, 0.3);
+}
+
+/* Grid des stats - UNIFIÉ */
+.stats-grid {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
+    gap: 1.5rem;
+    margin-bottom: 3rem;
+}
+
+/* Cards des stats - UNIFIÉES */
+.stat-card {
+    background: var(--card-background);
+    border-radius: var(--border-radius);
+    padding: 1.5rem;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+    transition: all 0.3s ease;
+    position: relative;
+    overflow: hidden;
+}
+
+.stat-card::before {
+    content: '';
+    position: absolute;
+    top: 0;
+    left: 0;
+    right: 0;
+    height: 4px;
+    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
+}
+
+.stat-card:hover {
+    transform: translateY(-4px);
+    box-shadow: var(--shadow-lg);
+    border-color: var(--primary-color);
+}
+
+.stat-card:nth-child(1)::before {
+    background: linear-gradient(90deg, var(--success-color), #16a34a);
+}
+
+.stat-card:nth-child(2)::before {
+    background: linear-gradient(90deg, #3b82f6, #1d4ed8);
+}
+
+.stat-card:nth-child(3)::before {
+    background: linear-gradient(90deg, var(--secondary-color), #7c3aed);
+}
+
+.stat-card:nth-child(4)::before {
+    background: linear-gradient(90deg, var(--warning-color), #d97706);
+}
+
+.stat-card .stat-icon {
+    font-size: 2.5rem;
+    margin-bottom: 1rem;
+    display: block;
+}
+
+.stat-content {
+    display: flex;
+    flex-direction: column;
+    gap: 0.5rem;
+}
+
+.stat-value {
+    font-size: 2.2rem;
+    font-weight: 700;
+    color: var(--text-primary);
+    line-height: 1;
+}
+
+.stat-label {
+    font-size: 0.9rem;
+    color: var(--text-secondary);
+    font-weight: 500;
+    text-transform: uppercase;
+    letter-spacing: 0.5px;
+}
+
+/* Status spécial pour le bot */
+.status-card {
+    position: relative;
+}
+
+.bot-status {
+    font-size: 1.4rem !important;
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+.status-help {
+    position: absolute;
+    top: calc(100% + 10px);
+    left: 0;
+    right: 0;
+    background: var(--text-primary);
+    color: white;
+    border-radius: 8px;
+    padding: 0.75rem;
+    font-size: 0.8rem;
+    opacity: 0;
+    visibility: hidden;
+    transition: all 0.3s ease;
+    z-index: 100;
+    box-shadow: var(--shadow-lg);
+}
+
+.status-help::before {
+    content: '';
+    position: absolute;
+    top: -6px;
+    left: 1rem;
+    border-left: 6px solid transparent;
+    border-right: 6px solid transparent;
+    border-bottom: 6px solid var(--text-primary);
+}
+
+.status-card:hover .status-help {
+    opacity: 1;
+    visibility: visible;
+    transform: translateY(-2px);
+}
+
+/* Grid principal UNIFIÉ */
+.dashboard-grid,
+.portfolio-grid {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(600px, 1fr));
+    gap: 2rem;
+    margin-bottom: 2rem;
+}
+
+/* Sections UNIFIÉES */
+.dashboard-section,
+.chart-section,
+.holdings-section,
+.performance-section {
+    background: var(--card-background);
+    border-radius: var(--border-radius);
+    padding: 2rem;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+    transition: all 0.3s ease;
+}
+
+.dashboard-section:hover,
+.chart-section:hover,
+.holdings-section:hover,
+.performance-section:hover {
+    box-shadow: var(--shadow-md);
+    border-color: var(--primary-color);
+}
+
+.dashboard-section h2,
+.chart-section h2,
+.holdings-section h2,
+.performance-section h2 {
+    margin: 0 0 1.5rem 0;
+    font-size: 1.4rem;
+    font-weight: 600;
+    color: var(--text-primary);
+    display: flex;
+    align-items: center;
+    gap: 0.75rem;
+    padding-bottom: 1rem;
+    border-bottom: 2px solid var(--border-color);
+    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
+    background-clip: text;
+    -webkit-background-clip: text;
+    -webkit-text-fill-color: transparent;
+}
+
+/* Portfolio summary UNIFIÉ */
+.portfolio-summary {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+    gap: 1.5rem;
+    margin-bottom: 2rem;
+}
+
+.summary-card {
+    background: var(--card-background);
+    border-radius: var(--border-radius);
+    padding: 1.5rem;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+    text-align: center;
+    transition: all 0.3s ease;
+}
+
+.summary-card:hover {
+    transform: translateY(-2px);
+    box-shadow: var(--shadow-md);
+}
+
+.summary-label {
+    font-size: 0.9rem;
+    color: var(--text-secondary);
+    font-weight: 500;
+    text-transform: uppercase;
+    letter-spacing: 0.5px;
+    margin-bottom: 0.5rem;
+}
+
+.summary-value {
+    font-size: 1.8rem;
+    font-weight: 700;
+    color: var(--text-primary);
+}
+
+/* Tables UNIFIÉES */
+.table-container {
+    overflow-x: auto;
+    border-radius: 10px;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+}
+
+.data-table {
+    width: 100%;
+    border-collapse: collapse;
+    font-size: 0.9rem;
+}
+
+.data-table th {
+    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
+    color: var(--text-primary);
+    font-weight: 600;
+    padding: 1.2rem 1rem;
+    text-align: left;
+    border-bottom: 2px solid var(--border-color);
+    font-size: 0.85rem;
+    text-transform: uppercase;
+    letter-spacing: 0.5px;
+}
+
+.data-table td {
+    padding: 1.2rem 1rem;
+    border-bottom: 1px solid var(--border-color);
+    vertical-align: top;
+}
+
+.data-table tbody tr:hover {
+    background: rgba(99, 102, 241, 0.05);
+}
+
+/* Chart container UNIFIÉ */
+.chart-container {
+    position: relative;
+    height: 400px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
+
+/* Performance grid UNIFIÉ */
+.performance-grid {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
+    gap: 1.5rem;
+}
+
+.perf-card {
+    background: linear-gradient(135deg, var(--card-background), #f8fafc);
+    border-radius: 10px;
+    padding: 1.5rem;
+    text-align: center;
+    border: 1px solid var(--border-color);
+    transition: all 0.3s ease;
+}
+
+.perf-card:hover {
+    transform: translateY(-2px);
+    box-shadow: var(--shadow-md);
+}
+
+.perf-label {
+    font-size: 0.9rem;
+    color: var(--text-secondary);
+    margin-bottom: 0.75rem;
+    font-weight: 500;
+}
+
+.perf-value {
+    font-size: 1.6rem;
+    font-weight: 700;
+    transition: all 0.3s ease;
+}
+
+.perf-value.positive {
+    color: var(--success-color);
+}
+
+.perf-value.negative {
+    color: var(--error-color);
+}
+
+.perf-value.neutral {
+    color: var(--text-muted);
+}
+
+/* Éléments de données UNIFIÉS */
+.date-time {
+    text-align: left;
+}
+
+.date {
+    font-size: 0.9rem;
+    font-weight: 600;
+    color: var(--text-primary);
+}
+
+.time {
+    font-size: 0.8rem;
+    color: var(--text-muted);
+}
+
+/* Badges UNIFIÉS */
+.transaction-side,
+.profit-target,
+.status-badge {
+    display: inline-flex;
+    align-items: center;
+    gap: 0.25rem;
+    padding: 0.4rem 0.8rem;
+    border-radius: 20px;
+    font-size: 0.8rem;
+    font-weight: 600;
+    text-transform: uppercase;
+    letter-spacing: 0.3px;
+    transition: all 0.2s ease;
+}
+
+.transaction-side.buy {
+    background: linear-gradient(135deg, #dcfce7, #bbf7d0);
+    color: #166534;
+}
+
+.transaction-side.sell {
+    background: linear-gradient(135deg, #fee2e2, #fecaca);
+    color: #991b1b;
+}
+
+.profit-target {
+    background: linear-gradient(135deg, var(--success-color), #16a34a);
+    color: white;
+}
+
+.status-badge.status-active {
+    background: linear-gradient(135deg, #dcfce7, #bbf7d0);
+    color: #166534;
+}
+
+.status-badge.status-ok {
+    background: linear-gradient(135deg, #dcfce7, #bbf7d0);
+    color: #166534;
+}
+
+.status-badge.status-high {
+    background: linear-gradient(135deg, #fee2e2, #fecaca);
+    color: #991b1b;
+}
+
+.status-badge.status-low {
+    background: linear-gradient(135deg, #e0f2fe, #b3e5fc);
+    color: #075985;
+}
+
+.status-badge.status-unknown {
+    background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
+    color: var(--text-muted);
+}
+
+.loading {
+    text-align: center;
+    color: var(--text-muted);
+    font-style: italic;
+    padding: 3rem !important;
+    font-size: 1rem;
+}
+
+/* Responsive UNIFIÉ */
+@media (max-width: 1024px) {
+    .nav-links {
+        gap: 0.75rem;
+    }
+
+    .nav-link {
+        padding: 0.7rem 1.2rem;
+        font-size: 1rem;
+    }
+}
+
+@media (max-width: 768px) {
+    .main-nav {
+        flex-direction: column;
+        gap: 1.5rem;
+        padding: 1.5rem;
+        position: relative;
+    }
+
+    body {
+        padding-top: 0;
+    }
+
+    .dashboard-container,
+    .portfolio-container {
+        padding: 1rem;
+    }
+
+    .stats-grid,
+    .portfolio-summary {
+        grid-template-columns: 1fr;
+        gap: 1rem;
+    }
+
+    .dashboard-grid,
+    .portfolio-grid {
+        grid-template-columns: 1fr;
+        gap: 1.5rem;
+    }
+
+    .page-header {
+        flex-direction: column;
+        align-items: stretch;
+    }
+
+    .nav-brand {
+        justify-content: center;
+        flex-direction: column;
+        gap: 1rem;
+    }
+
+    .status-indicator-wrapper {
+        margin-left: 0;
+    }
+}
+
+@media (max-width: 480px) {
+
+    .stat-card,
+    .summary-card,
+    .perf-card {
+        padding: 1rem;
+    }
+
+    .stat-value,
+    .summary-value {
+        font-size: 1.8rem;
+    }
+
+    .data-table th,
+    .data-table td {
+        padding: 0.75rem 0.5rem;
+    }
+
+    .nav-links {
+        display: grid;
+        grid-template-columns: repeat(2, 1fr);
+        gap: 0.5rem;
+        width: 100%;
+    }
+
+    .nav-link {
+        justify-content: center;
+        font-size: 0.9rem;
+    }
+
+    .page-header h1 {
+        font-size: 1.8rem;
+    }
+}
+
+/* STYLES SPÉCIFIQUES PAGE ORDERS */
+
+.orders-container {
+    max-width: 1400px;
+    margin: 0 auto;
+    padding: 2rem;
+}
+
+.orders-header {
+    margin-bottom: 2rem;
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    flex-wrap: wrap;
+    gap: 1rem;
+}
+
+.orders-header h1 {
+    font-size: 2rem;
+    font-weight: 700;
+    color: var(--text-primary);
+    margin: 0;
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+/* Filtres pour la page orders */
+.orders-filters {
+    display: flex;
+    gap: 1rem;
+    margin-bottom: 2rem;
+    flex-wrap: wrap;
+}
+
+.filter-btn {
+    background: var(--card-background);
+    border: 2px solid var(--border-color);
+    color: var(--text-primary);
+    padding: 0.75rem 1.5rem;
+    border-radius: 25px;
+    cursor: pointer;
+    font-weight: 600;
+    transition: all 0.3s ease;
+    font-size: 0.9rem;
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+.filter-btn:hover {
+    border-color: var(--primary-color);
+    color: var(--primary-color);
+    transform: translateY(-2px);
+}
+
+.filter-btn.active {
+    background: var(--primary-color);
+    border-color: var(--primary-color);
+    color: white;
+    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
+}
+
+/* Cards spécifiques aux ordres */
+.order-card {
+    background: var(--card-background);
+    border-radius: var(--border-radius);
+    padding: 1.5rem;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+    margin-bottom: 1rem;
+    transition: all 0.3s ease;
+}
+
+.order-card:hover {
+    transform: translateY(-2px);
+    box-shadow: var(--shadow-lg);
+    border-color: var(--primary-color);
+}
+
+.order-card-header {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    margin-bottom: 1rem;
+    padding-bottom: 1rem;
+    border-bottom: 1px solid var(--border-color);
+}
+
+.order-symbol {
+    font-size: 1.2rem;
+    font-weight: 700;
+    color: var(--text-primary);
+}
+
+.order-date {
+    color: var(--text-muted);
+    font-size: 0.9rem;
+}
+
+.order-details {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
+    gap: 1rem;
+}
+
+.order-detail {
+    text-align: center;
+}
+
+.order-detail-label {
+    font-size: 0.8rem;
+    color: var(--text-muted);
+    text-transform: uppercase;
+    letter-spacing: 0.5px;
+    margin-bottom: 0.25rem;
+}
+
+.order-detail-value {
+    font-size: 1.1rem;
+    font-weight: 600;
+    color: var(--text-primary);
+}
+
+/* Status badges pour ordres */
+.order-status {
+    display: inline-flex;
+    align-items: center;
+    gap: 0.5rem;
+    padding: 0.5rem 1rem;
+    border-radius: 25px;
+    font-size: 0.9rem;
+    font-weight: 600;
+    text-transform: uppercase;
+    letter-spacing: 0.3px;
+}
+
+.order-status.active {
+    background: linear-gradient(135deg, #dcfce7, #bbf7d0);
+    color: #166534;
+}
+
+.order-status.filled {
+    background: linear-gradient(135deg, #dbeafe, #bfdbfe);
+    color: #1e40af;
+}
+
+.order-status.cancelled {
+    background: linear-gradient(135deg, #fee2e2, #fecaca);
+    color: #991b1b;
+}
+
+/* STYLES SPÉCIFIQUES PAGE TRANSACTIONS */
+
+.transactions-container {
+    max-width: 1400px;
+    margin: 0 auto;
+    padding: 2rem;
+}
+
+.transactions-header {
+    margin-bottom: 2rem;
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    flex-wrap: wrap;
+    gap: 1rem;
+}
+
+.transactions-header h1 {
+    font-size: 2rem;
+    font-weight: 700;
+    color: var(--text-primary);
+    margin: 0;
+    display: flex;
+    align-items: center;
+    gap: 0.5rem;
+}
+
+/* Stats summary pour transactions */
+.transactions-summary {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+    gap: 1.5rem;
+    margin-bottom: 2rem;
+}
+
+.summary-card {
+    background: var(--card-background);
+    border-radius: var(--border-radius);
+    padding: 1.5rem;
+    border: 1px solid var(--border-color);
+    box-shadow: var(--shadow-sm);
+    text-align: center;
+    transition: all 0.3s ease;
+}
+
+.summary-card:hover {
+    transform: translateY(-2px);
+    box-shadow: var(--shadow-md);
+}
+
+.summary-card:nth-child(1) {
+    border-top: 4px solid var(--success-color);
+}
+
+.summary-card:nth-child(2) {
+    border-top: 4px solid var(--error-color);
+}
+
+.summary-card:nth-child(3) {
+    border-top: 4px solid var(--primary-color);
+}
+
+.summary-card:nth-child(4) {
+    border-top: 4px solid var(--warning-color);
+}
+
+.summary-icon {
+    font-size: 2rem;
+    margin-bottom: 0.5rem;
+    display: block;
+}
+
+.summary-value {
+    font-size: 1.5rem;
+    font-weight: 700;
+    color: var(--text-primary);
+    margin-bottom: 0.25rem;
+}
+
+.summary-label {
+    font-size: 0.9rem;
+    color: var(--text-secondary);
+    font-weight: 500;
+}
+
+/* Filtres de période pour transactions */
+.period-filters {
+    display: flex;
+    gap: 0.5rem;
+    margin-bottom: 1.5rem;
+    justify-content: center;
+    flex-wrap: wrap;
+}
+
+.period-btn {
+    background: var(--card-background);
+    border: 1px solid var(--border-color);
+    color: var(--text-secondary);
+    padding: 0.5rem 1rem;
+    border-radius: 6px;
+    cursor: pointer;
+    font-weight: 500;
+    transition: all 0.2s ease;
+    font-size: 0.9rem;
+}
+
+.period-btn:hover {
+    border-color: var(--primary-color);
+    color: var(--primary-color);
+}
+
+.period-btn.active {
+    background: var(--primary-color);
+    border-color: var(--primary-color);
+    color: white;
+}
+
+/* Améliorations spécifiques aux transactions */
+.transaction-row {
+    transition: all 0.2s ease;
+}
+
+.transaction-row:hover {
+    background: linear-gradient(90deg, rgba(99, 102, 241, 0.05), rgba(139, 92, 246, 0.05)) !important;
+    transform: translateX(4px);
+}
+
+.transaction-amount {
+    font-weight: 700;
+}
+
+.transaction-amount.positive {
+    color: var(--success-color);
+}
+
+.transaction-amount.negative {
+    color: var(--error-color);
+}
+
+/* Indicateur de type de transaction */
+.transaction-type-indicator {
+    width: 4px;
+    background: var(--border-color);
+    position: absolute;
+    left: 0;
+    top: 0;
+    bottom: 0;
+    transition: all 0.3s ease;
+}
+
+.transaction-row:hover .transaction-type-indicator {
+    background: var(--primary-color);
+}
+
+.data-table tbody tr {
+    position: relative;
+}
+
+/* RESPONSIVE POUR ORDERS ET TRANSACTIONS */
+
+@media (max-width: 768px) {
+
+    .orders-container,
+    .transactions-container {
+        padding: 1rem;
+    }
+
+    .orders-header,
+    .transactions-header {
+        flex-direction: column;
+        align-items: stretch;
+        text-align: center;
+    }
+
+    .orders-filters,
+    .period-filters {
+        justify-content: center;
+    }
+
+    .transactions-summary {
+        grid-template-columns: repeat(2, 1fr);
+        gap: 1rem;
+    }
+
+    .order-details {
+        grid-template-columns: repeat(2, 1fr);
+    }
+
+    .order-card {
+        padding: 1rem;
+    }
+}
+
+@media (max-width: 480px) {
+    .transactions-summary {
+        grid-template-columns: 1fr;
+    }
+
+    .order-details {
+        grid-template-columns: 1fr;
+    }
+
+    .orders-filters,
+    .period-filters {
+        flex-direction: column;
+    }
+
+    .filter-btn,
+    .period-btn {
+        text-align: center;
+    }
+}
+
+/* AMÉLIORATIONS VISUELLES COMMUNES */
+
+/* Animation de chargement améliorée */
+.loading {
+    background: linear-gradient(90deg, transparent, rgba(99, 102, 241, 0.1), transparent);
+    background-size: 200% 100%;
+    animation: loading-shimmer 1.5s infinite;
+}
+
+@keyframes loading-shimmer {
+    0% {
+        background-position: -200% 0;
+    }
+
+    100% {
+        background-position: 200% 0;
+    }
+}
+
+/* Scrollbar personnalisée */
+.table-container::-webkit-scrollbar {
+    height: 6px;
+}
+
+.table-container::-webkit-scrollbar-track {
+    background: var(--background);
+    border-radius: 3px;
+}
+
+.table-container::-webkit-scrollbar-thumb {
+    background: var(--border-color);
+    border-radius: 3px;
+}
+
+.table-container::-webkit-scrollbar-thumb:hover {
+    background: var(--primary-color);
+}
+
+/* Effet de focus amélioré */
+.filter-btn:focus,
+.period-btn:focus,
+.refresh-btn:focus {
+    outline: 2px solid var(--primary-color);
+    outline-offset: 2px;
+}
+
+/* Transitions fluides pour tous les éléments interactifs */
+.summary-card,
+.order-card,
+.filter-btn,
+.period-btn,
+.nav-link,
+.refresh-btn {
+    will-change: transform;
+}
+
+/* STYLES COMPLÉMENTAIRES POUR LES TEMPLATES */
+
+/* Métriques de performance */
+.performance-metrics {
+    display: grid;
+    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+    gap: 1rem;
+}
+
+.metric-item {
+    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
+    padding: 1rem;
+    border-radius: 8px;
+    border: 1px solid var(--border-color);
+    text-align: center;
+}
+
+.metric-label {
+    font-size: 0.8rem;
+    color: var(--text-muted);
+    text-transform: uppercase;
+    letter-spacing: 0.5px;
+    margin-bottom: 0.5rem;
+}
+
+.metric-value {
+    font-size: 1.2rem;
+    font-weight: 700;
+    color: var(--text-primary);
+}
+
+/* Boutons d'actions dans les tableaux */
+.action-btn-small {
+    background: var(--primary-color);
+    color: white;
+    border: none;
+    border-radius: 4px;
+    padding: 0.25rem 0.5rem;
+    font-size: 0.8rem;
+    cursor: pointer;
+    transition: all 0.2s ease;
+}
+
+.action-btn-small:hover {
+    background: color-mix(in srgb, var(--primary-color) 85%, black);
+    transform: translateY(-1px);
+}
+
+.action-btn-small.danger {
+    background: var(--error-color);
+}
+
+.action-btn-small.danger:hover {
+    background: color-mix(in srgb, var(--error-color) 85%, black);
+}
+
+/* Indicateur de statut d'ordre */
+.order-status-indicator {
+    width: 10px;
+    height: 10px;
+    border-radius: 50%;
+    display: inline-block;
+    margin-right: 0.5rem;
+}
+
+.order-status-indicator.active {
+    background: var(--success-color);
+    box-shadow: 0 0 6px rgba(34, 197, 94, 0.6);
+}
+
+.order-status-indicator.filled {
+    background: var(--primary-color);
+    box-shadow: 0 0 6px rgba(99, 102, 241, 0.6);
+}
+
+.order-status-indicator.cancelled {
+    background: var(--error-color);
+    box-shadow: 0 0 6px rgba(239, 68, 68, 0.6);
+}
+
+/* Animation pour les nouveaux éléments */
+@keyframes slideInUp {
+    from {
+        opacity: 0;
+        transform: translateY(20px);
+    }
+
+    to {
+        opacity: 1;
+        transform: translateY(0);
+    }
+}
+
+.dashboard-section {
+    animation: slideInUp 0.4s ease-out;
+}
+
+/* Responsive pour les nouvelles sections */
+@media (max-width: 768px) {
+    .performance-metrics {
+        grid-template-columns: repeat(2, 1fr);
+    }
+}
+
+@media (max-width: 480px) {
+    .performance-metrics {
+        grid-template-columns: 1fr;
+    }
+
+    .transactions-summary {
+        grid-template-columns: repeat(2, 1fr);
+    }
+}
\ No newline at end of file
diff --git a/dashboard/static/js/common.js b/dashboard/static/js/common.js
new file mode 100644
index 0000000..e99e31c
--- /dev/null
+++ b/dashboard/static/js/common.js
@@ -0,0 +1,99 @@
+// Enhanced Trading Bot Dashboard - JavaScript commun avec header
+
+const CONFIG = {
+    refreshInterval: 30000,
+    apiBase: '/api'
+}
+
+// Fonctions utilitaires
+window.formatNumber = function (num, decimals = 2) {
+    if (num === null || num === undefined) return '--'
+    return parseFloat(num).toFixed(decimals)
+}
+
+window.formatCurrency = function (amount) {
+    if (amount === null || amount === undefined) return '--'
+    return `${formatNumber(amount, 2)} USDC`
+}
+
+window.formatDateTime = function (dateStr) {
+    if (!dateStr) return '--'
+    const date = new Date(dateStr)
+    return date.toLocaleString('fr-FR')
+}
+
+// Chargement du statut bot pour le header
+window.loadBotStatus = async function () {
+    try {
+        console.log('🤖 Chargement du statut du bot...')
+
+        const response = await fetch('/api/stats')
+
+        if (!response.ok) {
+            updateHeaderStatus('error', 'Erreur API')
+            return null
+        }
+
+        const data = await response.json()
+        console.log('✅ Statut bot récupéré:', data)
+
+        // Mettre à jour le header
+        updateHeaderStatus(data.bot_status, getStatusText(data.bot_status, data.last_update))
+
+        return data
+
+    } catch (error) {
+        console.error('❌ Erreur loadBotStatus:', error)
+        updateHeaderStatus('error', 'Connexion échouée')
+        return null
+    }
+}
+
+function getStatusText(status, lastUpdate) {
+    switch (status) {
+        case 'active':
+            return 'Actif'
+        case 'idle':
+            if (lastUpdate) {
+                const lastDate = new Date(lastUpdate)
+                const now = new Date()
+                const diffHours = Math.floor((now - lastDate) / (1000 * 60 * 60))
+
+                if (diffHours < 1) return 'En attente (<1h)'
+                if (diffHours < 24) return `En attente (${diffHours}h)`
+                const diffDays = Math.floor(diffHours / 24)
+                return `En attente (${diffDays}j)`
+            }
+            return 'En attente'
+        case 'error':
+            return 'Erreur'
+        default:
+            return 'Inconnu'
+    }
+}
+
+function updateHeaderStatus(status, text) {
+    const dot = document.getElementById('header-status-indicator')
+    const textElement = document.getElementById('header-status-text')
+
+    if (dot) {
+        dot.className = `status-dot ${status}`
+    }
+
+    if (textElement) {
+        textElement.textContent = text
+    }
+}
+
+// Initialisation
+document.addEventListener('DOMContentLoaded', () => {
+    console.log('🤖 Dashboard Enhanced Trading Bot - JS commun initialisé')
+
+    // Chargement initial du statut
+    window.loadBotStatus()
+
+    // Refresh automatique du statut header
+    setInterval(window.loadBotStatus, 60000)
+})
+
+window.CONFIG = CONFIG
\ No newline at end of file
diff --git a/dashboard/static/js/dashboard-main.js b/dashboard/static/js/dashboard-main.js
new file mode 100644
index 0000000..81f7b09
--- /dev/null
+++ b/dashboard/static/js/dashboard-main.js
@@ -0,0 +1,300 @@
+// Enhanced Trading Bot Dashboard - Page principale AMÉLIORÉE
+
+let dashboardData = {
+    stats: null,
+    orders: null,
+    transactions: null
+};
+
+async function loadStats() {
+    try {
+        console.log('📊 Chargement stats...');
+        const response = await fetch('/api/stats');
+        
+        if (!response.ok) {
+            throw new Error(`HTTP ${response.status}`);
+        }
+        
+        const data = await response.json();
+        console.log('📊 Stats reçues:', data);
+        
+        dashboardData.stats = data;
+        
+        // Mettre à jour l'interface
+        updateStatsUI(data);
+        
+        // Mettre à jour la date de dernière mise à jour
+        updateLastUpdateTime();
+        
+        return data;
+        
+    } catch (error) {
+        console.error('❌ Erreur chargement stats:', error);
+        
+        updateStatsUI({
+            daily_buys: 'ERR',
+            active_oco: 'ERR',
+            total_transactions: 'ERR',
+            bot_status: 'error'
+        });
+        
+        return null;
+    }
+}
+
+function updateLastUpdateTime() {
+    const element = document.getElementById('last-update-time');
+    if (element) {
+        const now = new Date();
+        element.textContent = now.toLocaleString('fr-FR');
+        console.log('✅ Heure mise à jour');
+    }
+}
+
+function updateStatsUI(stats) {
+    console.log('🔄 Mise à jour stats UI...');
+    
+    // Stats numériques
+    const elements = {
+        'daily-buys-count': stats.daily_buys || 0,
+        'active-oco-count': stats.active_oco || 0,
+        'total-transactions-count': stats.total_transactions || 0
+    };
+    
+    Object.entries(elements).forEach(([elementId, value]) => {
+        const element = document.getElementById(elementId);
+        if (element) {
+            element.textContent = value;
+            console.log(`✅ ${elementId}: ${value}`);
+        }
+    });
+    
+    // Statut du bot avec plus de détails
+    const statusElement = document.getElementById('bot-status-text');
+    const statusIndicator = document.getElementById('bot-status-indicator');
+    
+    if (statusElement) {
+        const status = stats.bot_status || 'unknown';
+        const lastUpdate = stats.last_update;
+        let statusText = 'Inconnu';
+        let statusClass = 'status-unknown';
+        
+        switch(status) {
+            case 'active':
+                statusText = `🟢 Actif`;
+                statusClass = 'status-active';
+                break;
+            case 'idle':
+                // Calculer depuis quand il est inactif
+                if (lastUpdate) {
+                    const lastDate = new Date(lastUpdate);
+                    const now = new Date();
+                    const diffHours = Math.floor((now - lastDate) / (1000 * 60 * 60));
+                    
+                    if (diffHours < 1) {
+                        statusText = `🟡 Inactif (<1h)`;
+                    } else if (diffHours < 24) {
+                        statusText = `🟡 Inactif (${diffHours}h)`;
+                    } else {
+                        const diffDays = Math.floor(diffHours / 24);
+                        statusText = `🟡 Inactif (${diffDays}j)`;
+                    }
+                } else {
+                    statusText = '🟡 En attente';
+                }
+                statusClass = 'status-idle';
+                break;
+            case 'error':
+                statusText = '🔴 Erreur';
+                statusClass = 'status-error';
+                break;
+            default:
+                statusText = '⚫ Inconnu';
+                statusClass = 'status-unknown';
+        }
+        
+        statusElement.textContent = statusText;
+        
+        // Ajouter classe CSS si élément indicateur existe
+        if (statusIndicator) {
+            statusIndicator.className = `status-indicator ${statusClass}`;
+        }
+        
+        console.log(`✅ Statut bot: ${statusText}`);
+    }
+    
+    console.log('✅ Stats UI mises à jour');
+}
+
+async function loadTransactions() {
+    try {
+        console.log('📈 Chargement transactions...');
+        const response = await fetch('/api/stats/transactions');
+        
+        if (!response.ok) {
+            console.warn(`⚠️ Erreur transactions: ${response.status}`);
+            return [];
+        }
+        
+        const data = await response.json();
+        console.log('📈 Transactions reçues:', data);
+        
+        dashboardData.transactions = data.transactions || [];
+        updateTransactionsTable(data.transactions || []);
+        
+        return data.transactions || [];
+        
+    } catch (error) {
+        console.error('❌ Erreur chargement transactions:', error);
+        return [];
+    }
+}
+
+async function loadOrders() {
+    try {
+        console.log('🎯 Chargement ordres...');
+        const response = await fetch('/api/orders');
+        
+        if (!response.ok) {
+            console.warn(`⚠️ Erreur ordres: ${response.status}`);
+            return [];
+        }
+        
+        const data = await response.json();
+        console.log('🎯 Ordres reçus:', data);
+        
+        dashboardData.orders = data.orders || [];
+        updateOrdersTable(data.orders || []);
+        
+        return data.orders || [];
+        
+    } catch (error) {
+        console.error('❌ Erreur chargement ordres:', error);
+        return [];
+    }
+}
+
+function updateTransactionsTable(transactions) {
+    console.log('📈 Mise à jour tableau transactions...');
+    
+    const tbody = document.getElementById('recent-transactions-table');
+    if (!tbody) {
+        console.warn('⚠️ Tableau transactions non trouvé');
+        return;
+    }
+    
+    if (!transactions || transactions.length === 0) {
+        tbody.innerHTML = '<tr><td colspan="5" class="loading">Aucune transaction récente</td></tr>';
+        return;
+    }
+    
+    tbody.innerHTML = transactions.slice(0, 8).map(tx => {
+        const sideClass = tx.side === 'BUY' ? 'buy' : 'sell';
+        const sideIcon = tx.side === 'BUY' ? '📈' : '📉';
+        const sideText = tx.side === 'BUY' ? 'Achat' : 'Vente';
+        const date = new Date(tx.created_at);
+        const dateStr = date.toLocaleDateString('fr-FR');
+        const timeStr = date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
+        
+        return `
+            <tr>
+                <td>
+                    <div class="date-time">
+                        <div class="date">${dateStr}</div>
+                        <div class="time">${timeStr}</div>
+                    </div>
+                </td>
+                <td><strong>${tx.symbol.replace('USDC', '')}</strong></td>
+                <td><span class="transaction-side ${sideClass}">${sideIcon} ${sideText}</span></td>
+                <td>${parseFloat(tx.quantity).toFixed(6)}</td>
+                <td><strong>${parseFloat(tx.value).toFixed(2)} USDC</strong></td>
+            </tr>
+        `;
+    }).join('');
+    
+    console.log(`✅ ${transactions.length} transactions affichées`);
+}
+
+function updateOrdersTable(orders) {
+    console.log('🎯 Mise à jour tableau ordres...');
+    
+    const tbody = document.getElementById('active-orders-table');
+    if (!tbody) {
+        console.warn('⚠️ Tableau ordres non trouvé');
+        return;
+    }
+    
+    if (!orders || orders.length === 0) {
+        tbody.innerHTML = '<tr><td colspan="5" class="loading">Aucun ordre OCO actif</td></tr>';
+        return;
+    }
+    
+    tbody.innerHTML = orders.slice(0, 8).map(order => {
+        const date = new Date(order.created_at);
+        const dateStr = date.toLocaleDateString('fr-FR');
+        const timeStr = date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
+        const profitTarget = parseFloat(order.profit_target).toFixed(1);
+        
+        return `
+            <tr>
+                <td>
+                    <div class="date-time">
+                        <div class="date">${dateStr}</div>
+                        <div class="time">${timeStr}</div>
+                    </div>
+                </td>
+                <td><strong>${order.symbol.replace('USDC', '')}</strong></td>
+                <td>${parseFloat(order.quantity).toFixed(6)}</td>
+                <td><span class="profit-target">🎯 +${profitTarget}%</span></td>
+                <td><span class="status-badge status-active">🟢 Actif</span></td>
+            </tr>
+        `;
+    }).join('');
+    
+    console.log(`✅ ${orders.length} ordres affichés`);
+}
+
+async function refreshDashboard() {
+    console.log('🔄 Refresh dashboard principal...');
+    
+    try {
+        const [stats, transactions, orders] = await Promise.all([
+            loadStats(),
+            loadTransactions(),
+            loadOrders()
+        ]);
+        
+        console.log('✅ Dashboard principal refreshé avec succès');
+        
+    } catch (error) {
+        console.error('❌ Erreur refresh dashboard:', error);
+    }
+}
+
+document.addEventListener('DOMContentLoaded', () => {
+    console.log('📊 Page Dashboard principale initialisée');
+    
+    const criticalElements = [
+        'daily-buys-count',
+        'active-oco-count', 
+        'total-transactions-count',
+        'bot-status-text'
+    ];
+    
+    const missingElements = criticalElements.filter(id => !document.getElementById(id));
+    if (missingElements.length > 0) {
+        console.warn('⚠️ Éléments manquants:', missingElements);
+    } else {
+        console.log('✅ Éléments dashboard détectés');
+        
+        // Premier refresh immédiat
+        refreshDashboard();
+        
+        // Refresh automatique toutes les 30 secondes
+        setInterval(refreshDashboard, 30000);
+    }
+});
+
+// Export pour debug
+window.dashboardData = dashboardData;
+window.refreshDashboard = refreshDashboard;
diff --git a/dashboard/static/js/dashboard.js b/dashboard/static/js/dashboard.js
new file mode 100644
index 0000000..16fd1ea
--- /dev/null
+++ b/dashboard/static/js/dashboard.js
@@ -0,0 +1,236 @@
+// Enhanced Trading Bot Dashboard - JavaScript
+
+// Configuration
+const CONFIG = {
+    refreshInterval: 30000, // 30 secondes
+    apiBase: '/api'
+};
+
+// État global
+let isLoading = false;
+
+// Fonctions utilitaires
+function formatNumber(num, decimals = 2) {
+    if (num === null || num === undefined) return '--';
+    return parseFloat(num).toFixed(decimals);
+}
+
+function formatCurrency(amount) {
+    if (amount === null || amount === undefined) return '--';
+    return `${formatNumber(amount, 2)} USDC`;
+}
+
+function formatDateTime(dateStr) {
+    if (!dateStr) return '--';
+    const date = new Date(dateStr);
+    return date.toLocaleString('fr-FR');
+}
+
+function formatTime(dateStr) {
+    if (!dateStr) return '--';
+    const date = new Date(dateStr);
+    return date.toLocaleTimeString('fr-FR');
+}
+
+// Fonction sécurisée pour mettre à jour le contenu
+function safeSetContent(elementId, content) {
+    const element = document.getElementById(elementId);
+    if (element) {
+        element.textContent = content;
+        return true;
+    } else {
+        console.warn(`Élément non trouvé: ${elementId}`);
+        return false;
+    }
+}
+
+// Mise à jour du statut
+function updateStatus(status) {
+    const indicator = document.getElementById('status-indicator');
+    const text = document.getElementById('status-text');
+    
+    if (!indicator || !text) {
+        console.warn('Éléments status non trouvés dans le DOM');
+        return;
+    }
+    
+    // Nettoyer les classes
+    indicator.className = '';
+    
+    switch(status) {
+        case 'active':
+            indicator.className = 'status-active';
+            text.textContent = 'Actif';
+            break;
+        case 'idle':
+            indicator.className = 'status-idle';
+            text.textContent = 'En attente';
+            break;
+        default:
+            indicator.className = 'status-unknown';
+            text.textContent = 'Inconnu';
+    }
+}
+
+// Charger les statistiques
+async function loadStats() {
+    try {
+        const response = await fetch(`${CONFIG.apiBase}/stats`);
+        const data = await response.json();
+        
+        if (data.error) {
+            console.error('Erreur stats:', data.error);
+            return;
+        }
+        
+        // Mise à jour des cartes stats avec vérifications
+        safeSetContent('daily-buys', `${data.daily_buys || 0}/100`);
+        safeSetContent('active-oco', data.active_oco || 0);
+        safeSetContent('total-transactions', data.total_transactions || 0);
+        safeSetContent('bot-status', data.bot_status || 'unknown');
+        
+        // Mise à jour du statut navbar
+        updateStatus(data.bot_status);
+        
+        // Dernière mise à jour
+        safeSetContent('last-update', formatDateTime(data.timestamp));
+        
+        console.log('Stats chargées:', data);
+        
+    } catch (error) {
+        console.error('Erreur chargement stats:', error);
+    }
+}
+
+// Charger les transactions
+async function loadTransactions() {
+    try {
+        const response = await fetch(`${CONFIG.apiBase}/stats/transactions`);
+        const data = await response.json();
+        
+        const tbody = document.getElementById('transactions-table');
+        if (!tbody) {
+            console.warn('Table transactions non trouvée');
+            return;
+        }
+        
+        if (data.error || !data.transactions) {
+            tbody.innerHTML = '<tr><td colspan="6" class="loading">Erreur chargement</td></tr>';
+            return;
+        }
+        
+        if (data.transactions.length === 0) {
+            tbody.innerHTML = '<tr><td colspan="6" class="loading">Aucune transaction récente</td></tr>';
+            return;
+        }
+        
+        tbody.innerHTML = data.transactions.map(tx => `
+            <tr>
+                <td>${formatTime(tx.created_at)}</td>
+                <td>${tx.symbol}</td>
+                <td><span class="${tx.side.toLowerCase()}">${tx.side}</span></td>
+                <td>${formatNumber(tx.quantity, 8)}</td>
+                <td>${formatCurrency(tx.price)}</td>
+                <td>${formatCurrency(tx.value)}</td>
+            </tr>
+        `).join('');
+        
+        console.log(`Transactions chargées: ${data.transactions.length}`);
+        
+    } catch (error) {
+        console.error('Erreur chargement transactions:', error);
+        const tbody = document.getElementById('transactions-table');
+        if (tbody) {
+            tbody.innerHTML = '<tr><td colspan="6" class="loading">Erreur réseau</td></tr>';
+        }
+    }
+}
+
+// Charger les ordres OCO
+async function loadOrders() {
+    try {
+        const response = await fetch(`${CONFIG.apiBase}/orders`);
+        const data = await response.json();
+        
+        const tbody = document.getElementById('orders-table');
+        if (!tbody) {
+            console.warn('Table ordres non trouvée');
+            return;
+        }
+        
+        if (data.error || !data.orders) {
+            tbody.innerHTML = '<tr><td colspan="6" class="loading">Erreur chargement</td></tr>';
+            return;
+        }
+        
+        if (data.orders.length === 0) {
+            tbody.innerHTML = '<tr><td colspan="6" class="loading">Aucun ordre OCO actif</td></tr>';
+            return;
+        }
+        
+        tbody.innerHTML = data.orders.map(order => `
+            <tr>
+                <td>${order.symbol}</td>
+                <td>${formatNumber(order.quantity, 8)}</td>
+                <td>${formatNumber(order.kept_quantity, 8)}</td>
+                <td>+${formatNumber(order.profit_target, 1)}%</td>
+                <td>${formatCurrency(order.stop_loss_price)}</td>
+                <td>${formatTime(order.created_at)}</td>
+            </tr>
+        `).join('');
+        
+        console.log(`Ordres OCO chargés: ${data.orders.length}`);
+        
+    } catch (error) {
+        console.error('Erreur chargement ordres:', error);
+        const tbody = document.getElementById('orders-table');
+        if (tbody) {
+            tbody.innerHTML = '<tr><td colspan="6" class="loading">Erreur réseau</td></tr>';
+        }
+    }
+}
+
+// Rafraîchir tout le dashboard
+async function refreshDashboard() {
+    if (isLoading) {
+        console.log('Refresh déjà en cours, ignoré');
+        return;
+    }
+    
+    isLoading = true;
+    console.log('🔄 Refresh dashboard...');
+    
+    try {
+        await Promise.all([
+            loadStats(),
+            loadTransactions(),
+            loadOrders()
+        ]);
+        console.log('✅ Dashboard refreshé avec succès');
+    } catch (error) {
+        console.error('❌ Erreur refresh dashboard:', error);
+    } finally {
+        isLoading = false;
+    }
+}
+
+// Initialisation
+document.addEventListener('DOMContentLoaded', () => {
+    console.log('🤖 Dashboard Enhanced Trading Bot initialisé');
+    console.log('DOM éléments trouvés:');
+    console.log('- daily-buys:', !!document.getElementById('daily-buys'));
+    console.log('- active-oco:', !!document.getElementById('active-oco'));
+    console.log('- total-transactions:', !!document.getElementById('total-transactions'));
+    console.log('- bot-status:', !!document.getElementById('bot-status'));
+    console.log('- transactions-table:', !!document.getElementById('transactions-table'));
+    console.log('- orders-table:', !!document.getElementById('orders-table'));
+    
+    // Premier chargement
+    refreshDashboard();
+});
+
+// Export pour usage global
+window.refreshDashboard = refreshDashboard;
+window.loadStats = loadStats;
+window.loadTransactions = loadTransactions;
+window.loadOrders = loadOrders;
diff --git a/dashboard/static/js/orders.js b/dashboard/static/js/orders.js
new file mode 100644
index 0000000..d6ba235
--- /dev/null
+++ b/dashboard/static/js/orders.js
@@ -0,0 +1,218 @@
+// Enhanced Trading Bot Dashboard - Page Orders
+
+let ordersData = {
+    orders: [],
+    history: []
+}
+
+function showSectionLoader(id, show = true) {
+    const el = document.getElementById(id)
+    if (el) el.style.display = show ? 'block' : 'none'
+}
+
+// Fonctions de chargement
+async function loadOrders() {
+    try {
+        showSectionLoader('orders-list-loader', true)
+        const response = await fetch('/api/orders')
+        const data = await response.json()
+        ordersData.orders = data.orders || []
+        showSectionLoader('orders-list-loader', false)
+        return data.orders || []
+    } catch (error) {
+        showSectionLoader('orders-list-loader', false)
+        console.error('❌ Erreur chargement ordres:', error)
+        return []
+    }
+}
+
+async function loadOrdersHistory() {
+    try {
+        showSectionLoader('orders-history-loader', true)
+        const response = await fetch('/api/orders/history')
+        const data = await response.json()
+        ordersData.history = data.orders || []
+        showSectionLoader('orders-history-loader', false)
+        return data.orders || []
+    } catch (error) {
+        showSectionLoader('orders-history-loader', false)
+        console.error('❌ Erreur historique ordres:', error)
+        return []
+    }
+}
+
+function computeProfitFromHistory(history) {
+    // Profit approximatif: pour chaque exécution, value_sell - unknown buy (we fallback to 0)
+    // Since we do not join buy price per history row here, we accumulate executed value only
+    return history.reduce((sum, h) => {
+        const execValue = (h.execution_price || 0) * (h.execution_qty || 0)
+        return sum + execValue
+    }, 0)
+}
+
+function mapFilledOrdersFromHistory(history) {
+    // Map history rows to a uniform order row for the filled filter
+    return (history || []).map(h => {
+        const date = h.executed_at || h.created_at
+        return {
+            id: h.oco_order_id,
+            symbol: h.symbol,
+            quantity: h.execution_qty || h.quantity || 0,
+            buy_price: null,
+            profit_target: h.profit_target || '',
+            stop_loss_price: h.stop_loss_price || 0,
+            kept_quantity: h.kept_quantity || 0,
+            created_at: date,
+            status: h.status || 'FILLED'
+        }
+    })
+}
+
+function updateOrdersStats(_orders) {
+    const activeOrders = ordersData.orders.filter(o => o.status === 'ACTIVE')
+    const filledHistory = ordersData.history.filter(h => (h.status || '').includes('FILLED'))
+    const stopLossOrders = filledHistory.filter(h => (h.status || '') === 'STOP_FILLED')
+
+    document.getElementById('active-orders-count').textContent = activeOrders.length
+    document.getElementById('filled-orders-count').textContent = filledHistory.length
+    document.getElementById('stop-loss-count').textContent = stopLossOrders.length
+
+    // Profit affiché: somme des valeurs exécutées (approx)
+    const profitValue = computeProfitFromHistory(filledHistory)
+    document.getElementById('total-profit').textContent = `${profitValue.toFixed(2)} USDC`
+}
+
+function filterOrdersByStatus(status) {
+    if (!status || status === 'all') return ordersData.orders
+    if (status === 'active') return ordersData.orders.filter(o => o.status === 'ACTIVE')
+    if (status === 'filled') {
+        // Show executed items from history
+        return mapFilledOrdersFromHistory(ordersData.history)
+    }
+    if (status === 'cancelled') return ordersData.orders.filter(o => (o.status || '').toUpperCase().includes('CANCEL'))
+    return ordersData.orders
+}
+
+function updateOrdersTable(orders) {
+    const tbody = document.getElementById('orders-table')
+    if (!tbody) return
+
+    if (!orders || orders.length === 0) {
+        tbody.innerHTML = '<tr><td colspan="9" class="loading">Aucun ordre trouvé</td></tr>'
+        return
+    }
+
+    tbody.innerHTML = orders.map(order => {
+        const date = new Date(order.created_at)
+        const statusClass = (order.status || '').toLowerCase()
+        const buyPrice = (order.buy_price != null) ? `${parseFloat(order.buy_price).toFixed(6)} USDC` : '--'
+
+        return `
+            <tr>
+                <td>
+                    <div class="date-time">
+                        <div class="date">${date.toLocaleDateString('fr-FR')}</div>
+                        <div class="time">${date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</div>
+                    </div>
+                </td>
+                <td><strong>${order.symbol.replace('USDC', '')}</strong></td>
+                <td>${parseFloat(order.quantity || 0).toFixed(6)}</td>
+                <td>${buyPrice}</td>
+                <td><span class="profit-target">📈 ${order.profit_target ? '+' + order.profit_target + '%' : '--'}</span></td>
+                <td>${order.stop_loss_price != null ? parseFloat(order.stop_loss_price).toFixed(6) + ' USDC' : '--'}</td>
+                <td>${parseFloat(order.kept_quantity || 0).toFixed(6)}</td>
+                <td><span class="order-status ${statusClass}">✅ ${order.status || 'FILLED'}</span></td>
+                <td>
+                    <button class="action-btn-small" onclick="viewOrderDetails('${order.id || order.oco_order_id || ''}')">Détails</button>
+                </td>
+            </tr>
+        `
+    }).join('')
+}
+
+function updateHistoryTable(history) {
+    const tbody = document.getElementById('orders-history-table')
+    if (!tbody) return
+
+    if (history.length === 0) {
+        tbody.innerHTML = '<tr><td colspan="7" class="loading">Aucun historique disponible</td></tr>'
+        return
+    }
+
+    tbody.innerHTML = history.map(item => {
+        const date = new Date(item.executed_at || item.created_at)
+        const type = item.execution_type === 'PROFIT' ? 'Profit' : (item.execution_type === 'STOP_LOSS' ? 'Stop-loss' : (item.status || 'N/A'))
+        const execPrice = (item.execution_price != null) ? `${parseFloat(item.execution_price).toFixed(6)} USDC` : '--'
+        const execQty = (item.execution_qty != null) ? parseFloat(item.execution_qty).toFixed(8) : '--'
+        const keptQty = (item.kept_quantity != null) ? parseFloat(item.kept_quantity).toFixed(8) : '--'
+        return `
+            <tr>
+                <td>
+                    <div class="date-time">
+                        <div class="date">${date.toLocaleDateString('fr-FR')}</div>
+                        <div class="time">${date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</div>
+                    </div>
+                </td>
+                <td><strong>${item.symbol.replace('USDC', '')}</strong></td>
+                <td>${type}</td>
+                <td>${execPrice}</td>
+                <td>${execQty}</td>
+                <td>${item.status || 'N/A'}</td>
+                <td>${keptQty}</td>
+            </tr>
+        `
+    }).join('')
+}
+
+function updateLastUpdateTime() {
+    const element = document.getElementById('last-update-time')
+    if (element) {
+        element.textContent = new Date().toLocaleString('fr-FR')
+    }
+}
+
+window.refreshOrders = async function () {
+    const activeBtn = document.querySelector('.filter-btn.active')
+    const status = activeBtn ? activeBtn.dataset.filter : 'all'
+    await Promise.all([
+        loadOrders(),
+        loadOrdersHistory()
+    ])
+    // Respect active filter after refresh
+    const filtered = filterOrdersByStatus(status)
+    updateOrdersTable(filtered)
+    updateOrdersStats(ordersData.orders)
+    updateHistoryTable(ordersData.history)
+    updateLastUpdateTime()
+}
+
+window.viewOrderDetails = function (orderId) {
+    // Basic details modal using alert as placeholder
+    const hist = ordersData.history.find(h => String(h.oco_order_id) === String(orderId))
+    if (hist) {
+        alert(`Ordre ${orderId}\nSymbole: ${hist.symbol}\nStatut: ${hist.status}\nPrix exec: ${hist.execution_price || 'N/A'}\nQty exec: ${hist.execution_qty || 'N/A'}`)
+        return
+    }
+    const act = ordersData.orders.find(o => String(o.id) === String(orderId))
+    if (act) {
+        alert(`Ordre ${orderId}\nSymbole: ${act.symbol}\nStatut: ${act.status}\nPrix achat: ${act.buy_price || 'N/A'}\nQty: ${act.quantity}`)
+        return
+    }
+    alert(`Détails non trouvés pour l'ordre ${orderId}`)
+}
+
+// Initialisation
+document.addEventListener('DOMContentLoaded', () => {
+    document.querySelectorAll('.filter-btn').forEach(btn => {
+        btn.addEventListener('click', () => {
+            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'))
+            btn.classList.add('active')
+            const status = btn.dataset.filter
+            const filtered = filterOrdersByStatus(status)
+            updateOrdersTable(filtered)
+        })
+    })
+
+    window.refreshOrders()
+    setInterval(window.refreshOrders, 60000)
+})
\ No newline at end of file
diff --git a/dashboard/static/js/portfolio.js b/dashboard/static/js/portfolio.js
new file mode 100644
index 0000000..7b52b5c
--- /dev/null
+++ b/dashboard/static/js/portfolio.js
@@ -0,0 +1,381 @@
+// Enhanced Trading Bot Dashboard - Page Portfolio COMPLÈTE
+// Charge TOUTES les données : stats, balances, table, chart, performances
+
+console.log('📄 Chargement du fichier portfolio.js complet')
+
+// Variables globales
+let portfolioData = null
+let allocationChart = null
+let refreshInterval = null
+
+// === UTILITAIRES DE FORMATAGE ===
+function formatNumber(num, decimals = 2) {
+    if (num === null || num === undefined || isNaN(num)) return '--'
+    return parseFloat(num).toFixed(decimals)
+}
+
+function formatCurrency(amount) {
+    if (amount === null || amount === undefined || isNaN(amount)) return '--'
+    return `${formatNumber(amount, 2)} USDC`
+}
+
+function formatPercent(value) {
+    if (value === null || value === undefined || isNaN(value)) return '--'
+    return `${(value).toFixed(2)}%`
+}
+
+function setElementContent(elementId, content) {
+    const element = document.getElementById(elementId)
+    if (element) {
+        element.textContent = content
+        return true
+    } else {
+        console.warn(`⚠️ Élément ${elementId} non trouvé`)
+        return false
+    }
+}
+
+function showSectionLoader(id, show = true) {
+    const el = document.getElementById(id)
+    if (el) el.style.display = show ? 'block' : 'none'
+}
+
+// === CHARGEMENT DES DONNÉES PORTFOLIO ===
+async function loadPortfolioData() {
+    try {
+        showSectionLoader('portfolio-summary-loader', true)
+        showSectionLoader('holdings-loader', true)
+        showSectionLoader('allocation-loader', true)
+
+        const response = await fetch('/api/portfolio')
+
+        if (!response.ok) {
+            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
+        }
+
+        const data = await response.json()
+
+        if (data.error) {
+            console.error('❌ Erreur API portfolio:', data.error)
+            showError('portfolio', data.error)
+            showSectionLoader('portfolio-summary-loader', false)
+            showSectionLoader('holdings-loader', false)
+            showSectionLoader('allocation-loader', false)
+            return null
+        }
+
+        portfolioData = data
+
+        // Mettre à jour toutes les sections
+        updatePortfolioSummary(data)
+        updateHoldingsTable(data)
+        updateAllocationChart(data)
+
+        showSectionLoader('portfolio-summary-loader', false)
+        showSectionLoader('holdings-loader', false)
+        showSectionLoader('allocation-loader', false)
+
+        return data
+
+    } catch (error) {
+        console.error('❌ Erreur chargement portfolio:', error)
+        showError('portfolio', error.message)
+        showSectionLoader('portfolio-summary-loader', false)
+        showSectionLoader('holdings-loader', false)
+        showSectionLoader('allocation-loader', false)
+        return null
+    }
+}
+
+// === CHARGEMENT DES PERFORMANCES ===
+async function loadPerformanceData() {
+    try {
+        showSectionLoader('performance-loader', true)
+
+        const response = await fetch('/api/portfolio/performance')
+
+        if (!response.ok) {
+            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
+        }
+
+        const data = await response.json()
+
+        if (data.error) {
+            console.warn('⚠️ Erreur API performances:', data.error)
+            setDefaultPerformances()
+            showSectionLoader('performance-loader', false)
+            return null
+        }
+
+        updatePerformanceElements(data)
+        showSectionLoader('performance-loader', false)
+
+        return data
+
+    } catch (error) {
+        console.error('❌ Erreur chargement performances:', error)
+        setDefaultPerformances()
+        showSectionLoader('performance-loader', false)
+        return null
+    }
+}
+
+// === CHARGEMENT COMPLET DE LA PAGE ===
+async function loadAllData() {
+    await Promise.allSettled([
+        loadPortfolioData(),
+        loadPerformanceData()
+    ])
+}
+
+// === MISE À JOUR DU RÉSUMÉ PORTFOLIO ===
+function updatePortfolioSummary(data) {
+    try {
+        const activeCount = data.active_cryptos || 0
+        setElementContent('active-cryptos-count', activeCount)
+
+        const totalValue = data.total_value || 0
+        setElementContent('total-value', formatCurrency(totalValue))
+
+        const freeUsdc = data.free_usdc || 0
+        setElementContent('free-usdc', formatCurrency(freeUsdc))
+
+    } catch (error) {
+        console.error('❌ Erreur mise à jour résumé:', error)
+    }
+}
+
+// === MISE À JOUR DES PERFORMANCES ===
+function updatePerformanceElements(data) {
+    try {
+        const perfElements = {
+            'perf-today': data.today || 0,
+            'perf-7d': data['7d'] || data.week || 0,
+            'perf-30d': data['30d'] || data.month || 0,
+            'perf-total': data.total || 0
+        }
+
+        Object.entries(perfElements).forEach(([elementId, value]) => {
+            const element = document.getElementById(elementId)
+            if (element) {
+                const formattedValue = `${value >= 0 ? '+' : ''}${formatNumber(value, 2)}%`
+                element.textContent = formattedValue
+
+                element.classList.remove('positive', 'negative', 'neutral')
+                if (value > 0.1) element.classList.add('positive')
+                else if (value < -0.1) element.classList.add('negative')
+                else element.classList.add('neutral')
+            }
+        })
+
+    } catch (error) {
+        console.error('❌ Erreur mise à jour performances:', error)
+        setDefaultPerformances()
+    }
+}
+
+function setDefaultPerformances() {
+    const defaultPerfs = {
+        'perf-today': 0,
+        'perf-7d': 0,
+        'perf-30d': 0,
+        'perf-total': 0
+    }
+
+    Object.entries(defaultPerfs).forEach(([elementId, value]) => {
+        const element = document.getElementById(elementId)
+        if (element) {
+            element.textContent = `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`
+            element.classList.add('neutral')
+        }
+    })
+}
+
+// === MISE À JOUR DU TABLEAU HOLDINGS ===
+function updateHoldingsTable(data) {
+    const tbody = document.getElementById('holdings-table')
+    if (!tbody) return
+
+    if (!data.cryptos || data.cryptos.length === 0) {
+        tbody.innerHTML = '<tr><td colspan="7" class="loading">Aucune crypto configurée</td></tr>'
+        return
+    }
+
+    try {
+        const rows = data.cryptos.map((crypto) => {
+            const name = crypto.name || 'N/A'
+            const symbol = crypto.symbol || 'N/A'
+
+            const balance = crypto.balance || 0
+            const currentPrice = crypto.current_price || 0
+            const valueUsdc = crypto.value_usdc || 0
+
+            const targetAllocation = crypto.max_allocation || 0
+            const currentAllocation = crypto.current_allocation || 0
+            const allocationDiff = currentAllocation - targetAllocation
+
+            let statusClass = 'status-unknown'
+            let statusText = 'En attente'
+
+            if (balance > 0) {
+                if (allocationDiff > 0.03) {
+                    statusClass = 'status-high'
+                    statusText = 'Sur-alloué'
+                } else if (allocationDiff < -0.03) {
+                    statusClass = 'status-low'
+                    statusText = 'Sous-alloué'
+                } else {
+                    statusClass = 'status-ok'
+                    statusText = 'Équilibré'
+                }
+            }
+
+            return `
+                <tr>
+                    <td>
+                        <strong>${name}</strong><br>
+                        <small class="text-muted">${symbol}</small>
+                    </td>
+                    <td class="text-right">
+                        ${balance > 0 ? formatNumber(balance, 8) : '--'}<br>
+                        <small class="text-muted">${name}</small>
+                    </td>
+                    <td class="text-right">${currentPrice > 0 ? formatCurrency(currentPrice) : '--'}</td>
+                    <td class="text-right">${valueUsdc > 0 ? formatCurrency(valueUsdc) : '--'}</td>
+                    <td class="text-right">${formatPercent(currentAllocation * 100)}</td>
+                    <td class="text-right">${formatPercent(targetAllocation * 100)}</td>
+                    <td class="text-center">
+                        <span class="status-badge ${statusClass}">${statusText}</span>
+                    </td>
+                </tr>
+            `
+        })
+
+        tbody.innerHTML = rows.join('')
+
+    } catch (error) {
+        console.error('❌ Erreur construction tableau:', error)
+        tbody.innerHTML = '<tr><td colspan="7" class="error">Erreur lors de la construction du tableau</td></tr>'
+    }
+}
+
+// === MISE À JOUR DU GRAPHIQUE D'ALLOCATION ===
+function updateAllocationChart(data) {
+    const chartCanvas = document.getElementById('allocation-chart')
+    if (!chartCanvas) return
+
+    if (!data.cryptos || data.cryptos.length === 0) return
+
+    const cryptosWithBalance = data.cryptos.filter(c => (c.balance || 0) > 0 && (c.value_usdc || 0) > 0)
+
+    if (cryptosWithBalance.length === 0) {
+        const ctx = chartCanvas.getContext('2d')
+        ctx.clearRect(0, 0, chartCanvas.width, chartCanvas.height)
+        ctx.font = '16px Arial'
+        ctx.fillStyle = '#666'
+        ctx.textAlign = 'center'
+        ctx.fillText('Aucune donnée à afficher', chartCanvas.width / 2, chartCanvas.height / 2)
+        return
+    }
+
+    try {
+        const labels = cryptosWithBalance.map(c => c.name)
+        const values = cryptosWithBalance.map(c => c.value_usdc || 0)
+        const colors = [
+            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
+            '#FF9F40', '#c9cbcf', '#7FD8BE', '#A7C5EB', '#FF5C8D', '#ffb347'
+        ]
+
+        if (allocationChart) allocationChart.destroy()
+
+        allocationChart = new Chart(chartCanvas, {
+            type: 'pie',
+            data: {
+                labels: labels,
+                datasets: [{
+                    data: values,
+                    backgroundColor: colors.slice(0, values.length),
+                    borderWidth: 2,
+                    borderColor: '#ffffff'
+                }]
+            },
+            options: {
+                responsive: true,
+                maintainAspectRatio: false,
+                plugins: {
+                    legend: {
+                        position: 'right',
+                        labels: { font: { size: 12 }, padding: 15 }
+                    },
+                    tooltip: {
+                        callbacks: {
+                            label: function (context) {
+                                const value = context.raw
+                                const total = context.dataset.data.reduce((a, b) => a + b, 0)
+                                const percentage = ((value / total) * 100).toFixed(1)
+                                return `${context.label}: ${formatCurrency(value)} (${percentage}%)`
+                            }
+                        }
+                    }
+                }
+            }
+        })
+
+    } catch (error) {
+        console.error('❌ Erreur création graphique:', error)
+    }
+}
+
+// === GESTION DES ERREURS ===
+function showError(section, message) {
+    console.error(`❌ Erreur section ${section}:`, message)
+
+    const errorElement = document.getElementById(`${section}-error`)
+    if (errorElement) {
+        errorElement.textContent = `Erreur: ${message}`
+        errorElement.style.display = 'block'
+    }
+}
+
+// === INITIALISATION DE LA PAGE ===
+document.addEventListener('DOMContentLoaded', () => {
+    const essentialElements = [
+        'holdings-table',
+        'allocation-chart',
+        'active-cryptos-count',
+        'total-value',
+        'free-usdc'
+    ]
+
+    const missingElements = essentialElements.filter(id => !document.getElementById(id))
+    if (missingElements.length > 0) return
+
+    loadAllData()
+
+    if (refreshInterval) clearInterval(refreshInterval)
+    refreshInterval = setInterval(() => {
+        loadAllData()
+    }, 30000)
+})
+
+window.loadAllData = loadAllData
+
+// === NETTOYAGE À LA FERMETURE ===
+window.addEventListener('beforeunload', () => {
+    if (refreshInterval) {
+        clearInterval(refreshInterval)
+    }
+
+    if (allocationChart) {
+        allocationChart.destroy()
+    }
+})
+
+// === EXPORTS GLOBAUX POUR DEBUG ===
+window.loadPortfolioData = loadPortfolioData
+window.loadPerformanceData = loadPerformanceData
+window.loadAllData = loadAllData
+window.portfolioData = portfolioData
+window.allocationChart = allocationChart
+
+console.log('📄 Fin du chargement portfolio.js complet')
\ No newline at end of file
diff --git a/dashboard/static/js/transactions.js b/dashboard/static/js/transactions.js
new file mode 100644
index 0000000..f527f0d
--- /dev/null
+++ b/dashboard/static/js/transactions.js
@@ -0,0 +1,229 @@
+// Enhanced Trading Bot Dashboard - Page Transactions
+
+let transactionsData = {
+    transactions: [],
+    summary: {}
+}
+
+let transactionsChart = null
+
+function showSectionLoader(id, show = true) {
+    const el = document.getElementById(id)
+    if (el) el.style.display = show ? 'block' : 'none'
+}
+
+// Fonctions de chargement
+async function loadTransactions(period = 'all') {
+    try {
+        showSectionLoader('transactions-list-loader', true)
+        showSectionLoader('transactions-chart-loader', true)
+        showSectionLoader('crypto-stats-loader', true)
+
+        const response = await fetch(`/api/stats/transactions?period=${encodeURIComponent(period)}&limit=200`)
+        const data = await response.json()
+
+        transactionsData.transactions = data.transactions || []
+        updateTransactionsTable(data.transactions || [])
+        updateTransactionsSummary(data.transactions || [])
+        updateCryptoStats(data.transactions || [])
+        updateTransactionsChart(data.transactions || [])
+
+        showSectionLoader('transactions-list-loader', false)
+        showSectionLoader('transactions-chart-loader', false)
+        showSectionLoader('crypto-stats-loader', false)
+
+        return data.transactions || []
+    } catch (error) {
+        console.error('❌ Erreur chargement transactions:', error)
+        showSectionLoader('transactions-list-loader', false)
+        showSectionLoader('transactions-chart-loader', false)
+        showSectionLoader('crypto-stats-loader', false)
+        return []
+    }
+}
+
+function updateTransactionsSummary(transactions) {
+    const buys = transactions.filter(t => t.side === 'BUY')
+    const sells = transactions.filter(t => t.side === 'SELL')
+    const totalVolume = transactions.reduce((sum, t) => sum + (t.value || 0), 0)
+    const avgTradeSize = transactions.length ? totalVolume / transactions.length : 0
+
+    document.getElementById('total-buys').textContent = buys.length
+    document.getElementById('total-sells').textContent = sells.length
+    document.getElementById('total-volume').textContent = `${totalVolume.toFixed(2)} USDC`
+    document.getElementById('avg-trade-size').textContent = `${avgTradeSize.toFixed(2)} USDC`
+}
+
+function updateTransactionsTable(transactions) {
+    const tbody = document.getElementById('transactions-table')
+    if (!tbody) return
+
+    if (transactions.length === 0) {
+        tbody.innerHTML = '<tr><td colspan="9" class="loading">Aucune transaction trouvée</td></tr>'
+        return
+    }
+
+    tbody.innerHTML = transactions.map(tx => {
+        const date = new Date(tx.created_at)
+        const sideClass = tx.side === 'BUY' ? 'buy' : 'sell'
+        const sideIcon = tx.side === 'BUY' ? '📈' : '📉'
+
+        return `
+            <tr class="transaction-row">
+                <td>
+                    <div class="date-time">
+                        <div class="date">${date.toLocaleDateString('fr-FR')}</div>
+                        <div class="time">${date.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })}</div>
+                    </div>
+                </td>
+                <td><code style="font-size: 0.8rem;">${tx.order_id || '--'}</code></td>
+                <td><strong>${tx.symbol.replace('USDC', '')}</strong></td>
+                <td><span class="transaction-side ${sideClass}">${sideIcon} ${tx.side}</span></td>
+                <td>${parseFloat(tx.price).toFixed(6)} USDC</td>
+                <td>${parseFloat(tx.quantity).toFixed(8)}</td>
+                <td><strong>${parseFloat(tx.value || 0).toFixed(2)} USDC</strong></td>
+                <td>-- USDC</td>
+                <td><span class="status-badge status-active">✅ Confirmé</span></td>
+            </tr>
+        `
+    }).join('')
+}
+
+function updateCryptoStats(transactions) {
+    const tbody = document.getElementById('crypto-stats-table')
+    if (!tbody) return
+
+    const cryptoStats = {}
+    transactions.forEach(tx => {
+        const symbol = tx.symbol
+        if (!cryptoStats[symbol]) {
+            cryptoStats[symbol] = {
+                buys: 0,
+                sells: 0,
+                volume: 0,
+                lastTransaction: null
+            }
+        }
+
+        if (tx.side === 'BUY') cryptoStats[symbol].buys++
+        if (tx.side === 'SELL') cryptoStats[symbol].sells++
+        cryptoStats[symbol].volume += tx.value || 0
+
+        if (!cryptoStats[symbol].lastTransaction ||
+            new Date(tx.created_at) > new Date(cryptoStats[symbol].lastTransaction)) {
+            cryptoStats[symbol].lastTransaction = tx.created_at
+        }
+    })
+
+    const rows = Object.entries(cryptoStats).map(([symbol, stats]) => {
+        const lastDate = stats.lastTransaction ?
+            new Date(stats.lastTransaction).toLocaleDateString('fr-FR') : '--'
+
+        return `
+            <tr>
+                <td><strong>${symbol.replace('USDC', '')}</strong></td>
+                <td>${stats.buys}</td>
+                <td>${stats.sells}</td>
+                <td>${stats.volume.toFixed(2)} USDC</td>
+                <td>${lastDate}</td>
+            </tr>
+        `
+    })
+
+    tbody.innerHTML = rows.length ? rows.join('') :
+        '<tr><td colspan="5" class="loading">Aucune donnée</td></tr>'
+
+    updateMetrics(transactions)
+}
+
+function updateTransactionsChart(transactions) {
+    const canvas = document.getElementById('transactions-volume-chart')
+    if (!canvas) return
+
+    // Grouper par date (YYYY-MM-DD)
+    const byDay = {}
+    transactions.forEach(tx => {
+        const d = new Date(tx.created_at)
+        const key = d.getFullYear() + '-' + String(d.getMonth() + 1).padStart(2, '0') + '-' + String(d.getDate()).padStart(2, '0')
+        byDay[key] = (byDay[key] || 0) + (tx.value || 0)
+    })
+
+    const labels = Object.keys(byDay).sort()
+    const values = labels.map(k => parseFloat(byDay[k].toFixed(2)))
+
+    if (transactionsChart) {
+        transactionsChart.destroy()
+    }
+
+    const ctx = canvas.getContext('2d')
+    transactionsChart = new Chart(ctx, {
+        type: 'bar',
+        data: {
+            labels: labels,
+            datasets: [{
+                label: 'Volume (USDC)',
+                data: values,
+                backgroundColor: 'rgba(99, 102, 241, 0.5)',
+                borderColor: '#6366f1',
+                borderWidth: 1
+            }]
+        },
+        options: {
+            responsive: true,
+            scales: {
+                x: { ticks: { autoSkip: true, maxTicksLimit: 10 } },
+                y: { beginAtZero: true }
+            },
+            plugins: {
+                tooltip: {
+                    callbacks: {
+                        label: function (ctx) { return `${ctx.parsed.y.toFixed(2)} USDC` }
+                    }
+                }
+            }
+        }
+    })
+}
+
+function updateMetrics(transactions) {
+    const biggestTrade = Math.max(0, ...transactions.map(t => t.value || 0))
+    const buys = transactions.filter(t => t.side === 'BUY').length
+    const sells = transactions.filter(t => t.side === 'SELL').length
+    const total = buys + sells
+
+    const buyPercentage = total ? ((buys / total) * 100).toFixed(0) : 0
+    const sellPercentage = total ? ((sells / total) * 100).toFixed(0) : 0
+
+    document.getElementById('trade-frequency').textContent = `${total} tx`
+    document.getElementById('total-commission').textContent = '-- USDC'
+    document.getElementById('biggest-trade').textContent = `${biggestTrade.toFixed(2)} USDC`
+    document.getElementById('buy-sell-ratio').textContent = `${buyPercentage}% / ${sellPercentage}%`
+}
+
+function updateLastUpdateTime() {
+    const element = document.getElementById('last-update-time')
+    if (element) {
+        element.textContent = new Date().toLocaleString('fr-FR')
+    }
+}
+
+window.refreshTransactions = async function () {
+    const activeBtn = document.querySelector('.period-btn.active')
+    const period = activeBtn ? activeBtn.dataset.period : 'all'
+    await loadTransactions(period)
+    updateLastUpdateTime()
+}
+
+// Initialisation
+document.addEventListener('DOMContentLoaded', () => {
+    document.querySelectorAll('.period-btn').forEach(btn => {
+        btn.addEventListener('click', async () => {
+            document.querySelectorAll('.period-btn').forEach(b => b.classList.remove('active'))
+            btn.classList.add('active')
+            await loadTransactions(btn.dataset.period)
+        })
+    })
+
+    window.refreshTransactions()
+    setInterval(window.refreshTransactions, 60000)
+})
\ No newline at end of file
diff --git a/dashboard/templates/base.html b/dashboard/templates/base.html
new file mode 100644
index 0000000..7d0af0c
--- /dev/null
+++ b/dashboard/templates/base.html
@@ -0,0 +1,77 @@
+<!DOCTYPE html>
+<html lang="fr">
+
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>{% block title %}Enhanced Trading Bot Dashboard{% endblock %}</title>
+    <link rel="stylesheet" href="{{ url_for('static', filename='css/dashboard.css') }}?v=2025">
+    <style>
+        /* Global loader overlay */
+        #global-loader {
+            position: fixed;
+            top: 0;
+            left: 0;
+            right: 0;
+            bottom: 0;
+            background: rgba(255, 255, 255, 0.6);
+            z-index: 2000;
+            display: none;
+            align-items: center;
+            justify-content: center;
+            backdrop-filter: blur(2px);
+        }
+
+        .spinner {
+            width: 48px;
+            height: 48px;
+            border: 5px solid rgba(99, 102, 241, 0.2);
+            border-top-color: #6366f1;
+            border-radius: 50%;
+            animation: spin 0.8s linear infinite;
+        }
+
+        @keyframes spin {
+            to {
+                transform: rotate(360deg);
+            }
+        }
+    </style>
+</head>
+
+<body>
+    <!-- Navigation Header -->
+    <nav class="main-nav">
+        <div class="nav-brand">
+            <span class="brand-icon">🤖</span>
+            <span class="brand-text">Enhanced Trading Bot</span>
+            <div class="status-indicator-wrapper">
+                <div class="status-dot" id="header-status-indicator"></div>
+                <span class="status-text" id="header-status-text">Chargement...</span>
+            </div>
+        </div>
+
+        <div class="nav-links">
+            <a href="/" class="nav-link">📊 Dashboard</a>
+            <a href="/portfolio" class="nav-link">💰 Portfolio</a>
+            <a href="/orders" class="nav-link">📋 Ordres</a>
+            <a href="/transactions" class="nav-link">📈 Transactions</a>
+        </div>
+    </nav>
+
+    <!-- Loader Overlay -->
+    <div id="global-loader">
+        <div class="spinner"></div>
+    </div>
+
+    <!-- Main Content -->
+    <main class="main-content">
+        {% block content %}{% endblock %}
+    </main>
+
+    <!-- Common Scripts -->
+    <script src="{{ url_for('static', filename='js/common.js') }}?v=2025"></script>
+    {% block scripts %}{% endblock %}
+</body>
+
+</html>
\ No newline at end of file
diff --git a/dashboard/templates/index.html b/dashboard/templates/index.html
new file mode 100644
index 0000000..2584616
--- /dev/null
+++ b/dashboard/templates/index.html
@@ -0,0 +1,110 @@
+{% extends "base.html" %}
+
+{% block title %}Dashboard - Enhanced Trading Bot{% endblock %}
+
+{% block content %}
+<div class="dashboard-container">
+    <div class="page-header">
+        <h1>📊 Dashboard Trading Bot</h1>
+        <div class="last-update">
+            Dernière mise à jour: <span id="last-update-time">--</span>
+            <button class="refresh-btn" onclick="window.refreshDashboard()" title="Actualiser">
+                🔄
+            </button>
+        </div>
+    </div>
+
+    <!-- Stats Summary -->
+    <div class="stats-grid">
+        <div class="stat-card">
+            <div class="stat-icon">💰</div>
+            <div class="stat-content">
+                <div class="stat-value" id="daily-buys-count">--</div>
+                <div class="stat-label">Achats aujourd'hui</div>
+            </div>
+        </div>
+
+        <div class="stat-card">
+            <div class="stat-icon">🎯</div>
+            <div class="stat-content">
+                <div class="stat-value" id="active-oco-count">--</div>
+                <div class="stat-label">Ordres OCO actifs</div>
+            </div>
+        </div>
+
+        <div class="stat-card">
+            <div class="stat-icon">📊</div>
+            <div class="stat-content">
+                <div class="stat-value" id="total-transactions-count">--</div>
+                <div class="stat-label">Total transactions</div>
+            </div>
+        </div>
+
+        <div class="stat-card status-card">
+            <div class="stat-icon">🔄</div>
+            <div class="stat-content">
+                <div class="stat-value bot-status" id="bot-status-text">--</div>
+                <div class="stat-label">Statut du bot</div>
+                <div class="status-help">
+                    🟢 Actif: trading récent<br>
+                    🟡 Inactif: pas de trades<br>
+                    🔴 Erreur: problème détecté
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Main Content Grid -->
+    <div class="dashboard-grid">
+        <!-- Recent Transactions -->
+        <div class="dashboard-section">
+            <h2>📈 Activités récentes</h2>
+            <div class="table-container">
+                <table class="data-table">
+                    <thead>
+                        <tr>
+                            <th>Date/Heure</th>
+                            <th>Crypto</th>
+                            <th>Type</th>
+                            <th>Quantité</th>
+                            <th>Valeur</th>
+                        </tr>
+                    </thead>
+                    <tbody id="recent-transactions-table">
+                        <tr>
+                            <td colspan="5" class="loading">Chargement des transactions...</td>
+                        </tr>
+                    </tbody>
+                </table>
+            </div>
+        </div>
+
+        <!-- Active OCO Orders -->
+        <div class="dashboard-section">
+            <h2>🎯 Ordres OCO actifs</h2>
+            <div class="table-container">
+                <table class="data-table">
+                    <thead>
+                        <tr>
+                            <th>Date/Heure</th>
+                            <th>Crypto</th>
+                            <th>Quantité</th>
+                            <th>Profit cible</th>
+                            <th>Statut</th>
+                        </tr>
+                    </thead>
+                    <tbody id="active-orders-table">
+                        <tr>
+                            <td colspan="5" class="loading">Chargement des ordres...</td>
+                        </tr>
+                    </tbody>
+                </table>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
+
+{% block scripts %}
+<script src="{{ url_for('static', filename='js/dashboard-main.js') }}?v=2025"></script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/orders.html b/dashboard/templates/orders.html
new file mode 100644
index 0000000..5037f76
--- /dev/null
+++ b/dashboard/templates/orders.html
@@ -0,0 +1,126 @@
+{% extends "base.html" %}
+
+{% block title %}Ordres - Enhanced Trading Bot{% endblock %}
+
+{% block content %}
+<div class="orders-container">
+    <div class="orders-header">
+        <h1>📋 Ordres OCO</h1>
+        <div class="last-update">
+            Dernière mise à jour: <span id="last-update-time">--</span>
+            <button class="refresh-btn" onclick="window.refreshOrders()" title="Actualiser">
+                🔄 Actualiser
+            </button>
+        </div>
+    </div>
+
+    <!-- Filtres -->
+    <div class="orders-filters">
+        <button class="filter-btn active" data-filter="all">
+            📋 Tous les ordres
+        </button>
+        <button class="filter-btn" data-filter="active">
+            🟢 Actifs
+        </button>
+        <button class="filter-btn" data-filter="filled">
+            ✅ Exécutés
+        </button>
+        <button class="filter-btn" data-filter="cancelled">
+            ❌ Annulés
+        </button>
+    </div>
+
+    <!-- Stats rapides -->
+    <div class="stats-grid">
+        <div class="stat-card">
+            <div class="stat-icon">🟢</div>
+            <div class="stat-content">
+                <div class="stat-value" id="active-orders-count">--</div>
+                <div class="stat-label">Ordres actifs</div>
+            </div>
+        </div>
+
+        <div class="stat-card">
+            <div class="stat-icon">✅</div>
+            <div class="stat-content">
+                <div class="stat-value" id="filled-orders-count">--</div>
+                <div class="stat-label">Profits réalisés</div>
+            </div>
+        </div>
+
+        <div class="stat-card">
+            <div class="stat-icon">🛡️</div>
+            <div class="stat-content">
+                <div class="stat-value" id="stop-loss-count">--</div>
+                <div class="stat-label">Stop-loss déclenchés</div>
+            </div>
+        </div>
+
+        <div class="stat-card">
+            <div class="stat-icon">💰</div>
+            <div class="stat-content">
+                <div class="stat-value" id="total-profit">--</div>
+                <div class="stat-label">Profit total USDC</div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Liste des ordres -->
+    <div class="dashboard-section">
+        <h2>📋 Liste des ordres</h2>
+        <div id="orders-list-loader" class="loading" style="display:none;">Chargement des ordres...</div>
+        <div class="table-container">
+            <table class="data-table">
+                <thead>
+                    <tr>
+                        <th>Date/Heure</th>
+                        <th>Symbole</th>
+                        <th>Quantité</th>
+                        <th>Prix d'achat</th>
+                        <th>Profit cible</th>
+                        <th>Stop-loss</th>
+                        <th>Crypto gardée</th>
+                        <th>Statut</th>
+                        <th>Actions</th>
+                    </tr>
+                </thead>
+                <tbody id="orders-table">
+                    <tr>
+                        <td colspan="9" class="loading">Chargement des ordres...</td>
+                    </tr>
+                </tbody>
+            </table>
+        </div>
+    </div>
+
+    <!-- Historique des ordres exécutés -->
+    <div class="dashboard-section">
+        <h2>📊 Historique des exécutions</h2>
+        <div id="orders-history-loader" class="loading" style="display:none;">Chargement de l'historique...</div>
+        <div class="table-container">
+            <table class="data-table">
+                <thead>
+                    <tr>
+                        <th>Date exécution</th>
+                        <th>Symbole</th>
+                        <th>Type</th>
+                        <th>Prix exécution</th>
+                        <th>Quantité</th>
+                        <th>Résultat</th>
+                        <th>Crypto gardée</th>
+                    </tr>
+                </thead>
+                <tbody id="orders-history-table">
+                    <tr>
+                        <td colspan="7" class="loading">Chargement de l'historique...</td>
+                    </tr>
+                </tbody>
+            </table>
+        </div>
+    </div>
+</div>
+{% endblock %}
+
+{% block scripts %}
+<script src="{{ url_for('static', filename='js/orders.js') }}?v=2025"></script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/templates/portfolio.html b/dashboard/templates/portfolio.html
new file mode 100644
index 0000000..aedd3e3
--- /dev/null
+++ b/dashboard/templates/portfolio.html
@@ -0,0 +1,88 @@
+{% extends "base.html" %}
+
+{% block title %}Portfolio - Enhanced Trading Bot{% endblock %}
+
+{% block content %}
+<div class="portfolio-container">
+    <div class="page-header">
+        <h1>💰 Portfolio</h1>
+        <div class="portfolio-summary">
+            <div class="summary-card">
+                <span class="summary-label">Valeur totale</span>
+                <span class="summary-value" id="total-value">-- USDC</span>
+            </div>
+            <div class="summary-card">
+                <span class="summary-label">USDC libre</span>
+                <span class="summary-value" id="free-usdc">-- USDC</span>
+            </div>
+            <div class="summary-card">
+                <span class="summary-label">Cryptos actives</span>
+                <span class="summary-value" id="active-cryptos-count">--</span>
+            </div>
+        </div>
+    </div>
+
+    <div class="portfolio-grid">
+        <!-- Allocation Chart -->
+        <div class="chart-section">
+            <h2>📈 Répartition du portefeuille</h2>
+            <div class="chart-container">
+                <canvas id="allocation-chart" width="400" height="300"></canvas>
+            </div>
+        </div>
+
+        <!-- Holdings Table -->
+        <div class="holdings-section">
+            <h2>💎 Holdings</h2>
+            <div class="table-container">
+                <table class="data-table">
+                    <thead>
+                        <tr>
+                            <th>Crypto</th>
+                            <th>Balance</th>
+                            <th>Prix actuel</th>
+                            <th>Valeur USDC</th>
+                            <th>Allocation</th>
+                            <th>Target</th>
+                            <th>Status</th>
+                        </tr>
+                    </thead>
+                    <tbody id="holdings-table">
+                        <tr>
+                            <td colspan="7" class="loading">Chargement des holdings...</td>
+                        </tr>
+                    </tbody>
+                </table>
+            </div>
+        </div>
+
+        <!-- Performance Section -->
+        <div class="performance-section">
+            <h2>📊 Performance</h2>
+            <div class="performance-grid">
+                <div class="perf-card">
+                    <div class="perf-label">Aujourd'hui</div>
+                    <div class="perf-value" id="perf-today">+0.00%</div>
+                </div>
+                <div class="perf-card">
+                    <div class="perf-label">7 jours</div>
+                    <div class="perf-value" id="perf-7d">+0.00%</div>
+                </div>
+                <div class="perf-card">
+                    <div class="perf-label">30 jours</div>
+                    <div class="perf-value" id="perf-30d">+0.00%</div>
+                </div>
+                <div class="perf-card">
+                    <div class="perf-label">Total</div>
+                    <div class="perf-value" id="perf-total">+0.00%</div>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
+
+{% block scripts %}
+<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
+<script src="{{ url_for('static', filename='js/portfolio.js') }}?v=2025"></script>
+{% endblock %}
diff --git a/dashboard/templates/transactions.html b/dashboard/templates/transactions.html
new file mode 100644
index 0000000..127b969
--- /dev/null
+++ b/dashboard/templates/transactions.html
@@ -0,0 +1,142 @@
+{% extends "base.html" %}
+
+{% block title %}Transactions - Enhanced Trading Bot{% endblock %}
+
+{% block content %}
+<div class="transactions-container">
+    <div class="transactions-header">
+        <h1>📈 Transactions</h1>
+        <div class="last-update">
+            Dernière mise à jour: <span id="last-update-time">--</span>
+            <button class="refresh-btn" onclick="window.refreshTransactions()" title="Actualiser">
+                🔄 Actualiser
+            </button>
+        </div>
+    </div>
+
+    <!-- Filtres de période -->
+    <div class="period-filters">
+        <button class="period-btn active" data-period="today">Aujourd'hui</button>
+        <button class="period-btn" data-period="week">7 jours</button>
+        <button class="period-btn" data-period="month">30 jours</button>
+        <button class="period-btn" data-period="all">Tout</button>
+    </div>
+
+    <!-- Résumé des transactions -->
+    <div class="transactions-summary">
+        <div class="summary-card">
+            <div class="summary-icon">📈</div>
+            <div class="summary-value" id="total-buys">--</div>
+            <div class="summary-label">Total achats</div>
+        </div>
+
+        <div class="summary-card">
+            <div class="summary-icon">📉</div>
+            <div class="summary-value" id="total-sells">--</div>
+            <div class="summary-label">Total ventes</div>
+        </div>
+
+        <div class="summary-card">
+            <div class="summary-icon">💰</div>
+            <div class="summary-value" id="total-volume">--</div>
+            <div class="summary-label">Volume total USDC</div>
+        </div>
+
+        <div class="summary-card">
+            <div class="summary-icon">📊</div>
+            <div class="summary-value" id="avg-trade-size">--</div>
+            <div class="summary-label">Taille moy. trade</div>
+        </div>
+    </div>
+
+    <!-- Graphique des transactions -->
+    <div class="dashboard-section">
+        <h2>📊 Volume des transactions</h2>
+        <div id="transactions-chart-loader" class="loading" style="display:none;">Chargement du graphique...</div>
+        <div class="chart-container">
+            <canvas id="transactions-volume-chart" width="600" height="300"></canvas>
+        </div>
+    </div>
+
+    <!-- Tableau des transactions -->
+    <div class="dashboard-section">
+        <h2>📋 Détail des transactions</h2>
+        <div id="transactions-list-loader" class="loading" style="display:none;">Chargement des transactions...</div>
+        <div class="table-container">
+            <table class="data-table">
+                <thead>
+                    <tr>
+                        <th>Date/Heure</th>
+                        <th>Order ID</th>
+                        <th>Symbole</th>
+                        <th>Type</th>
+                        <th>Prix</th>
+                        <th>Quantité</th>
+                        <th>Valeur USDC</th>
+                        <th>Commission</th>
+                        <th>Statut</th>
+                    </tr>
+                </thead>
+                <tbody id="transactions-table">
+                    <tr>
+                        <td colspan="9" class="loading">Chargement des transactions...</td>
+                    </tr>
+                </tbody>
+            </table>
+        </div>
+    </div>
+
+    <!-- Statistiques détaillées -->
+    <div class="dashboard-grid">
+        <div class="dashboard-section">
+            <h2>📊 Répartition par crypto</h2>
+            <div id="crypto-stats-loader" class="loading" style="display:none;">Calcul des statistiques...</div>
+            <div class="table-container">
+                <table class="data-table">
+                    <thead>
+                        <tr>
+                            <th>Symbole</th>
+                            <th>Nb achats</th>
+                            <th>Nb ventes</th>
+                            <th>Volume total</th>
+                            <th>Dernière transaction</th>
+                        </tr>
+                    </thead>
+                    <tbody id="crypto-stats-table">
+                        <tr>
+                            <td colspan="5" class="loading">Calcul des statistiques...</td>
+                        </tr>
+                    </tbody>
+                </table>
+            </div>
+        </div>
+
+        <div class="dashboard-section">
+            <h2>📈 Métriques de performance</h2>
+            <div class="performance-metrics">
+                <div class="metric-item">
+                    <div class="metric-label">Fréquence de trading</div>
+                    <div class="metric-value" id="trade-frequency">-- trades/jour</div>
+                </div>
+                <div class="metric-item">
+                    <div class="metric-label">Commission totale</div>
+                    <div class="metric-value" id="total-commission">-- USDC</div>
+                </div>
+                <div class="metric-item">
+                    <div class="metric-label">Plus gros trade</div>
+                    <div class="metric-value" id="biggest-trade">-- USDC</div>
+                </div>
+                <div class="metric-item">
+                    <div class="metric-label">Répartition achat/vente</div>
+                    <div class="metric-value" id="buy-sell-ratio">--% / --%</div>
+                </div>
+            </div>
+        </div>
+    </div>
+</div>
+{% endblock %}
+
+{% block scripts %}
+<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
+<script src="{{ url_for('static', filename='js/transactions.js') }}?v=2025"></script>
+{% endblock %}
\ No newline at end of file
diff --git a/dashboard/utils/__init__.py b/dashboard/utils/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/dashboard/utils/data_provider.py b/dashboard/utils/data_provider.py
new file mode 100644
index 0000000..c35fa9c
--- /dev/null
+++ b/dashboard/utils/data_provider.py
@@ -0,0 +1,389 @@
+"""
+Enhanced Trading Bot Dashboard - Fournisseur de données
+Interface entre le dashboard et le bot de trading
+"""
+
+import sys
+import sqlite3
+import json
+from pathlib import Path
+from datetime import datetime, timedelta
+from typing import Dict, List, Optional
+
+# Import des modules bot
+try:
+    from src.database import DatabaseManager
+    from src.portfolio_manager import EnhancedPortfolioManager
+    from src.binance_client import EnhancedBinanceClient
+except ImportError as e:
+    print(f"⚠️  Erreur import modules bot: {e}")
+
+class BotDataProvider:
+    """Fournisseur de données pour le dashboard"""
+    
+    def __init__(self, config_path: str = "config/config.json"):
+        self.config_path = config_path
+        self.db = DatabaseManager()
+        self.portfolio_manager = EnhancedPortfolioManager(config_path)
+        
+        # Initialiser le client Binance
+        binance_config = self.portfolio_manager.get_binance_config()
+        self.binance_client = EnhancedBinanceClient(
+            binance_config['api_key'], 
+            binance_config['api_secret']
+        )
+    
+    def _get_current_timestamp(self):
+        """Timestamp actuel"""
+        return datetime.now().isoformat()
+    
+    def _period_to_start(self, period: str) -> Optional[str]:
+        """Convertit une période logique en timestamp SQLite ("YYYY-MM-DD HH:MM:SS")."""
+        try:
+            period = (period or '').lower()
+            now = datetime.now()
+            if period in ('today', 'jour', 'day'):
+                start = now.replace(hour=0, minute=0, second=0, microsecond=0)
+            elif period in ('week', '7d', '7days'):
+                start = now - timedelta(days=7)
+            elif period in ('month', '30d', '30days'):
+                start = now - timedelta(days=30)
+            elif period in ('all', '', None):
+                return None
+            else:
+                start = now - timedelta(days=30)
+            # Important: utiliser un format compatible avec les comparaisons SQLite
+            return start.strftime('%Y-%m-%d %H:%M:%S')
+        except Exception:
+            return None
+    
+    def get_quick_stats(self) -> Dict:
+        """Statistiques rapides pour l'en-tête"""
+        try:
+            if not self.db:
+                return {'error': 'Database non disponible'}
+            
+            stats = self.db.get_quick_stats()
+            
+            # Ajouter des infos supplémentaires
+            stats.update({
+                'timestamp': self._get_current_timestamp(),
+                'bot_status': self._get_bot_status(),
+                'last_update': self._get_last_activity()
+            })
+            
+            return stats
+            
+        except Exception as e:
+            return {'error': str(e)}
+    
+    def get_portfolio_summary(self) -> Dict:
+        """Résumé du portefeuille avec données réelles Binance"""
+        try:
+            # Récupérer balances compte
+            account_info = self.binance_client._make_request_with_retry(
+                self.binance_client.client.get_account
+            )
+            balances = account_info.get('balances', [])
+            
+            # Configuration des cryptos
+            active_cryptos = self.portfolio_manager.get_active_cryptos()
+            
+            # Enrichir les cryptos avec balances et prix
+            total_value_usdc = 0
+            enriched_cryptos = []
+            
+            for crypto in active_cryptos:
+                name = crypto.get('name')
+                symbol = crypto.get('symbol')
+                
+                # Recherche flexible de la balance
+                balance_info = None
+                for balance in balances:
+                    if (
+                        balance['asset'] == name or  
+                        balance['asset'] == symbol.replace('USDC', '')
+                    ):
+                        balance_info = balance
+                        break
+                
+                if balance_info:
+                    total_balance = float(balance_info['free']) + float(balance_info['locked'])
+                    
+                    # Récupérer prix actuel
+                    try:
+                        ticker = self.binance_client._make_request_with_retry(
+                            self.binance_client.client.get_symbol_ticker,
+                            symbol=symbol
+                        )
+                        current_price = float(ticker['price'])
+                        value_usdc = total_balance * current_price
+                        
+                        # Données enrichies
+                        crypto_data = {
+                            **crypto,
+                            'balance': total_balance,
+                            'free_balance': float(balance_info['free']),
+                            'locked_balance': float(balance_info['locked']),
+                            'current_price': current_price,
+                            'value_usdc': value_usdc
+                        }
+                        
+                        total_value_usdc += value_usdc
+                        enriched_cryptos.append(crypto_data)
+                    
+                    except Exception as price_error:
+                        print(f"⚠️ Erreur prix {symbol}: {price_error}")
+            
+            # Calculer allocations
+            for crypto in enriched_cryptos:
+                crypto['current_allocation'] = crypto['value_usdc'] / total_value_usdc if total_value_usdc > 0 else 0
+            
+            return {
+                'active_cryptos': len(enriched_cryptos),
+                'cryptos': enriched_cryptos,
+                'total_value': total_value_usdc,
+                'free_usdc': next((float(b['free']) for b in balances if b['asset'] == 'USDC'), 0),
+                'last_update': self._get_current_timestamp()
+            }
+        
+        except Exception as e:
+            print(f"❌ Erreur portfolio summary: {e}")
+            return {'error': str(e)}
+    
+    def get_portfolio_performance(self) -> Dict:
+        """Calcule des performances (aujourd'hui, 7j, 30j, total) basées sur la DB."""
+        try:
+            if not self.db:
+                return {'today': 0, '7d': 0, '30d': 0, 'total': 0}
+            
+            def compute_period_perf(days: int) -> float:
+                with self.db.get_connection() as conn:
+                    if days == 0:
+                        # Aujourd'hui
+                        start = datetime.now().strftime('%Y-%m-%d 00:00:00')
+                    elif days < 0:
+                        # Total
+                        start = None
+                    else:
+                        start = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d %H:%M:%S')
+                    
+                    if start:
+                        where = "WHERE created_at >= ?"
+                        params = (start,)
+                    else:
+                        where = ""
+                        params = ()
+                    
+                    q = f"""
+                        SELECT 
+                            COALESCE(SUM(CASE WHEN order_side = 'BUY' THEN price*qty ELSE 0 END), 0) as invested,
+                            COALESCE(SUM(CASE WHEN order_side = 'SELL' THEN price*qty ELSE 0 END), 0) as sold,
+                            COALESCE(SUM(commission), 0) as fees
+                        FROM transactions
+                        {where}
+                    """
+                    cur = conn.execute(q, params)
+                    row = cur.fetchone()
+                    invested = float(row[0]) if row and row[0] is not None else 0.0
+                    sold = float(row[1]) if row and row[1] is not None else 0.0
+                    fees = float(row[2]) if row and row[2] is not None else 0.0
+                    profit = sold - invested - fees
+                    return (profit / invested * 100.0) if invested > 0 else 0.0
+            
+            return {
+                'today': round(compute_period_perf(0), 2),
+                '7d': round(compute_period_perf(7), 2),
+                '30d': round(compute_period_perf(30), 2),
+                'total': round(compute_period_perf(-1), 2)
+            }
+        except Exception as e:
+            print(f"Erreur performance: {e}")
+            return {'today': 0, '7d': 0, '30d': 0, 'total': 0}
+    
+    def get_active_orders(self) -> List[Dict]:
+        """Ordres OCO actifs enrichis (id, buy_price)"""
+        try:
+            if not self.db:
+                return []
+            
+            with self.db.get_connection() as conn:
+                cursor = conn.execute("""
+                    SELECT id, symbol, quantity, kept_quantity, profit_target,
+                           stop_loss_price, created_at, status, buy_transaction_id
+                    FROM oco_orders 
+                    WHERE status = 'ACTIVE'
+                    ORDER BY created_at DESC
+                """)
+                
+                orders = []
+                for row in cursor.fetchall():
+                    order_id = row[0]
+                    symbol = row[1]
+                    qty = float(row[2])
+                    kept_qty = float(row[3])
+                    profit_target = float(row[4]) if row[4] is not None else None
+                    stop_loss_price = float(row[5]) if row[5] is not None else None
+                    created_at = row[6]
+                    status = row[7]
+                    buy_tx_id = row[8]
+                    
+                    buy_price = None
+                    if buy_tx_id:
+                        try:
+                            c2 = conn.execute(
+                                "SELECT price FROM transactions WHERE id = ? LIMIT 1",
+                                (buy_tx_id,)
+                            )
+                            r2 = c2.fetchone()
+                            if r2 and r2[0] is not None:
+                                buy_price = float(r2[0])
+                        except Exception:
+                            pass
+                    
+                    orders.append({
+                        'id': order_id,
+                        'symbol': symbol,
+                        'quantity': qty,
+                        'kept_quantity': kept_qty,
+                        'profit_target': profit_target,
+                        'stop_loss_price': stop_loss_price,
+                        'buy_price': buy_price,
+                        'created_at': created_at,
+                        'status': status
+                    })
+                
+                return orders
+                
+        except Exception as e:
+            print(f"Erreur get_active_orders: {e}")
+            return [{'error': str(e)}]
+    
+    def get_orders_history(self, limit: int = 50) -> List[Dict]:
+        """Historique des OCO exécutés/terminés"""
+        try:
+            if not self.db:
+                return []
+            
+            with self.db.get_connection() as conn:
+                cursor = conn.execute("""
+                    SELECT oco_order_id, symbol, quantity, kept_quantity,
+                           profit_target, stop_loss_price,
+                           status, execution_price, execution_qty, execution_type,
+                           created_at, executed_at
+                    FROM oco_orders
+                    WHERE status != 'ACTIVE' AND status IS NOT NULL
+                    ORDER BY COALESCE(executed_at, created_at) DESC
+                    LIMIT ?
+                """, (limit,))
+                
+                history = []
+                for row in cursor.fetchall():
+                    history.append({
+                        'oco_order_id': row[0],
+                        'symbol': row[1],
+                        'quantity': float(row[2]) if row[2] is not None else 0,
+                        'kept_quantity': float(row[3]) if row[3] is not None else 0,
+                        'profit_target': float(row[4]) if row[4] is not None else None,
+                        'stop_loss_price': float(row[5]) if row[5] is not None else None,
+                        'status': row[6],
+                        'execution_price': float(row[7]) if row[7] is not None else None,
+                        'execution_qty': float(row[8]) if row[8] is not None else None,
+                        'execution_type': row[9],
+                        'created_at': row[10],
+                        'executed_at': row[11]
+                    })
+                return history
+        except Exception as e:
+            print(f"Erreur get_orders_history: {e}")
+            return [{'error': str(e)}]
+    
+    def get_recent_transactions(self, limit: int = 10, period: Optional[str] = None) -> List[Dict]:
+        """Transactions récentes avec filtrage de période et order_id"""
+        try:
+            if not self.db:
+                return []
+            
+            start_str = self._period_to_start(period)
+            
+            with self.db.get_connection() as conn:
+                if start_str:
+                    cursor = conn.execute("""
+                        SELECT order_id, symbol, order_side, price, qty,
+                               created_at, ROUND(price * qty, 2) as value
+                        FROM transactions 
+                        WHERE created_at >= ?
+                        ORDER BY created_at DESC 
+                        LIMIT ?
+                    """, (start_str, limit))
+                else:
+                    cursor = conn.execute("""
+                        SELECT order_id, symbol, order_side, price, qty,
+                               created_at, ROUND(price * qty, 2) as value
+                        FROM transactions 
+                        ORDER BY created_at DESC 
+                        LIMIT ?
+                    """, (limit,))
+                
+                transactions = []
+                for row in cursor.fetchall():
+                    transactions.append({
+                        'order_id': row[0],
+                        'symbol': row[1],
+                        'side': row[2],
+                        'price': float(row[3]) if row[3] is not None else 0,
+                        'quantity': float(row[4]) if row[4] is not None else 0,
+                        'created_at': row[5],
+                        'value': float(row[6]) if row[6] is not None else 0
+                    })
+                
+                return transactions
+                
+        except Exception as e:
+            print(f"Erreur get_recent_transactions: {e}")
+            return [{'error': str(e)}]
+    
+    def _get_bot_status(self) -> str:
+        """Status du bot (approximatif)"""
+        try:
+            # Vérifier activité récente (dernières 15 min)
+            if not self.db:
+                return 'unknown'
+            
+            cutoff = datetime.now() - timedelta(minutes=15)
+            
+            with self.db.get_connection() as conn:
+                cursor = conn.execute("""
+                    SELECT COUNT(*) FROM transactions 
+                    WHERE created_at >= ?
+                """, (cutoff.strftime('%Y-%m-%d %H:%M:%S'),))
+                
+                recent_activity = cursor.fetchone()[0]
+                
+                if recent_activity > 0:
+                    return 'active'
+                else:
+                    return 'idle'
+                    
+        except:
+            return 'unknown'
+    
+    def _get_last_activity(self) -> Optional[str]:
+        """Dernière activité"""
+        try:
+            if not self.db:
+                return None
+            
+            with self.db.get_connection() as conn:
+                cursor = conn.execute("""
+                    SELECT MAX(created_at) FROM transactions
+                """)
+                
+                last_activity = cursor.fetchone()[0]
+                return last_activity
+                
+        except:
+            return None
+
+# Instance globale pour le dashboard
+data_provider = BotDataProvider()
