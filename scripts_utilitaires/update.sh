#!/bin/bash

# üîÑ Enhanced Trading Bot - Script de mise √† jour v2.1.8
# Script d√©plac√© dans scripts_utilitaires/ - Chemins corrig√©s

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîÑ === MISE √Ä JOUR TRADING BOT ===${NC}"
echo ""

# üîß CORRECTION: D√©tection chemin racine du projet
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"  # Remonte d'un niveau
CURRENT_USER=$(whoami)

echo -e "${BLUE}üìç Script dans: ${SCRIPT_DIR}${NC}"
echo -e "${BLUE}üìç Projet dans: ${PROJECT_ROOT}${NC}"
echo ""

# V√©rification que nous sommes dans le bon projet
if [ ! -f "${PROJECT_ROOT}/run_bot.py" ] || [ ! -d "${PROJECT_ROOT}/src" ]; then
    echo -e "${RED}‚ùå Erreur: Structure de projet non trouv√©e${NC}"
    echo -e "${RED}   run_bot.py et dossier src/ doivent √™tre √† la racine${NC}"
    exit 1
fi

# üîß CORRECTION: Toutes les op√©rations dans PROJECT_ROOT
cd "$PROJECT_ROOT"
echo -e "${GREEN}‚úÖ Position corrig√©e vers racine du projet${NC}"

# D√©tection version actuelle
CURRENT_VERSION=""
if git describe --tags --exact-match 2>/dev/null; then
    CURRENT_VERSION=$(git describe --tags --exact-match)
    echo -e "${BLUE}üìå Version actuelle: ${CURRENT_VERSION}${NC}"
else
    echo -e "${YELLOW}üìå Version: commit $(git rev-parse --short HEAD)${NC}"
fi

# V√©rification des changements locaux
if ! git diff-index --quiet HEAD --; then
    echo -e "${YELLOW}‚ö†Ô∏è  Changements locaux d√©tect√©s${NC}"
    git status --short
    echo ""
fi

# üíæ SAUVEGARDES √âLARGIES (dans PROJECT_ROOT)
echo -e "${YELLOW}üíæ Sauvegarde des donn√©es critiques...${NC}"

# Configuration principale
if [ -f "config/config.json" ]; then
    cp config/config.json "config/config.json.backup.$(date +%Y%m%d_%H%M)"
    echo "‚úÖ config.json sauvegard√©"
fi

# Configuration email Smart Monitor
if [ -f "config/email_config.json" ]; then
    cp config/email_config.json "config/email_config.json.backup.$(date +%Y%m%d_%H%M)"
    echo "‚úÖ email_config.json sauvegard√©"
fi

# Base de donn√©es
if [ -f "db/trading.db" ]; then
    BACKUP_DB="db/trading_backup_$(date +%Y%m%d_%H%M).db"
    cp db/trading.db "$BACKUP_DB"
    echo "‚úÖ Base de donn√©es sauvegard√©e: $BACKUP_DB"
fi

# Logs importants (derniers 7 jours)
if [ -d "logs" ]; then
    BACKUP_LOGS="logs_backup_$(date +%Y%m%d_%H%M)"
    mkdir -p "$BACKUP_LOGS"
    find logs/ -name "*.log" -mtime -7 -exec cp {} "$BACKUP_LOGS/" \; 2>/dev/null || true
    if [ "$(ls -A "$BACKUP_LOGS" 2>/dev/null)" ]; then
        echo "‚úÖ Logs r√©cents sauvegard√©s: $BACKUP_LOGS"
    else
        rm -rf "$BACKUP_LOGS"
    fi
fi

# üì• MISE √Ä JOUR GIT
echo -e "${YELLOW}üì• R√©cup√©ration des mises √† jour...${NC}"

# Stash des changements locaux
if ! git diff-index --quiet HEAD --; then
    git stash push -m "Sauvegarde locale avant mise √† jour $(date +%Y%m%d_%H%M)"
    echo "‚úÖ Changements locaux mis de c√¥t√©"
fi

# R√©cup√©ration des tags
git fetch --tags

# Mise √† jour
echo "üîÑ Mise √† jour du code..."
if git pull origin main; then
    echo -e "${GREEN}‚úÖ Code mis √† jour avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors de la mise √† jour Git${NC}"
    exit 1
fi

# Affichage de la nouvelle version
NEW_VERSION=""
if git describe --tags --exact-match 2>/dev/null; then
    NEW_VERSION=$(git describe --tags --exact-match)
    echo -e "${GREEN}üÜï Nouvelle version: ${NEW_VERSION}${NC}"
else
    echo -e "${BLUE}üÜï Version: commit $(git rev-parse --short HEAD)${NC}"
fi

# üì¶ MISE √Ä JOUR D√âPENDANCES
echo -e "${YELLOW}üì¶ Mise √† jour des d√©pendances Python...${NC}"

if [ ! -d "venv" ]; then
    echo -e "${YELLOW}üîß Cr√©ation de l'environnement virtuel manquant...${NC}"
    python3 -m venv venv
fi

source venv/bin/activate

if [ -f "requirements.txt" ]; then
    pip install --upgrade pip
    pip install --upgrade -r requirements.txt
    echo -e "${GREEN}‚úÖ D√©pendances mises √† jour${NC}"
else
    echo -e "${RED}‚ùå requirements.txt non trouv√©${NC}"
fi

# üîß RESTAURATION CONFIGURATIONS
echo -e "${YELLOW}üîß V√©rification des configurations...${NC}"

# Restaurer config principale si disparue
if [ ! -f "config/config.json" ]; then
    LATEST_BACKUP=$(ls -t config/config.json.backup.* 2>/dev/null | head -1 || echo "")
    if [ -n "$LATEST_BACKUP" ] && [ -f "$LATEST_BACKUP" ]; then
        cp "$LATEST_BACKUP" config/config.json
        echo -e "${GREEN}‚úÖ Configuration principale restaur√©e depuis $LATEST_BACKUP${NC}"
    elif [ -f "config/config.template.json" ]; then
        cp config/config.template.json config/config.json
        echo -e "${YELLOW}‚ö†Ô∏è  Configuration cr√©√©e depuis template - CONFIGUREZ VOS CL√âS API${NC}"
    fi
fi

# Restaurer config email si disparue
if [ ! -f "config/email_config.json" ] && [ -f "config/email_config.template.json" ]; then
    cp config/email_config.template.json config/email_config.json
    echo -e "${YELLOW}üìß Configuration email cr√©√©e depuis template${NC}"
fi

# üîë PERMISSIONS (PROJECT_ROOT + scripts_utilitaires)
echo -e "${YELLOW}üîë Mise √† jour des permissions...${NC}"
chmod +x *.py *.sh scripts_utilitaires/*.py scripts_utilitaires/*.sh 2>/dev/null || true
chmod 755 logs db config 2>/dev/null || true

# üß™ TESTS POST-MISE √Ä JOUR
echo -e "${YELLOW}üß™ Tests de validation...${NC}"

# Test modules principaux
if python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from src.bot import EnhancedTradingBot
    from src.binance_client import EnhancedBinanceClient
    print('‚úÖ Modules principaux OK')
except Exception as e:
    print(f'‚ùå Erreur modules: {e}')
    sys.exit(1)
" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Modules principaux valid√©s${NC}"
else
    echo -e "${RED}‚ùå Erreur validation modules${NC}"
fi

# Test Smart Monitor v2.1.8
if [ -f "smart_monitor.py" ]; then
    if python3 -c "
try:
    exec(open('smart_monitor.py').read())
    print('‚úÖ Smart Monitor OK')
except SystemExit:
    print('‚úÖ Smart Monitor OK (exit normal)')
except Exception as e:
    print(f'‚ö†Ô∏è  Smart Monitor: {e}')
" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Smart Monitor v2.1.8 valid√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Smart Monitor n√©cessite configuration${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Smart Monitor non trouv√© (version < 2.1.8 ?)${NC}"
fi

# üìã MIGRATION v2.1.8
echo -e "${YELLOW}üîÑ V√©rification migration v2.1.8...${NC}"

# D√©tecter anciens scripts de monitoring obsol√®tes
OBSOLETE_SCRIPTS=()
[ -f "monitor.sh" ] && OBSOLETE_SCRIPTS+=("monitor.sh")
[ -f "email_sender.py" ] && OBSOLETE_SCRIPTS+=("email_sender.py")  
[ -f "performance_stats.py" ] && OBSOLETE_SCRIPTS+=("performance_stats.py")

if [ ${#OBSOLETE_SCRIPTS[@]} -gt 0 ]; then
    echo -e "${YELLOW}üì¶ Scripts obsol√®tes d√©tect√©s (remplac√©s par Smart Monitor):${NC}"
    for script in "${OBSOLETE_SCRIPTS[@]}"; do
        echo "   - $script"
    done
    
    read -p "Voulez-vous les sauvegarder et les supprimer ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        OBSOLETE_BACKUP="backup_obsolete_scripts_$(date +%Y%m%d_%H%M)"
        mkdir -p "$OBSOLETE_BACKUP"
        
        for script in "${OBSOLETE_SCRIPTS[@]}"; do
            mv "$script" "$OBSOLETE_BACKUP/"
            echo "‚úÖ $script ‚Üí $OBSOLETE_BACKUP/"
        done
        
        echo -e "${GREEN}‚úÖ Scripts obsol√®tes sauvegard√©s dans $OBSOLETE_BACKUP${NC}"
        echo -e "${BLUE}üìä Utilisez maintenant: python3 smart_monitor.py daily|weekly${NC}"
    fi
fi

# üìä R√âSUM√â FINAL
echo ""
echo -e "${GREEN}üéâ === MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS ===${NC}"
echo ""

if [ -n "$CURRENT_VERSION" ] && [ -n "$NEW_VERSION" ] && [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
    echo -e "${BLUE}üìå $CURRENT_VERSION ‚Üí $NEW_VERSION${NC}"
    echo ""
fi

echo -e "${BLUE}üß™ TESTS RECOMMAND√âS:${NC}"
echo "1. Test configuration:"
echo "   cd ${PROJECT_ROOT}"
echo "   source venv/bin/activate"
echo "   python3 run_bot.py --dry-run"
echo ""
echo "2. Test Smart Monitor v2.1.8:"
echo "   python3 smart_monitor.py daily"
echo ""
echo "3. V√©rifier base de donn√©es:"
echo "   python3 db_query.py --stats"
echo ""

if [ -f "smart_monitor.py" ]; then
    echo -e "${BLUE}üìä NOUVEAU CRONTAB RECOMMAND√â (v2.1.8):${NC}"
    echo "   crontab -e"
    echo "   # Remplacer par:"
    echo "   */10 * * * * cd ${PROJECT_ROOT} && ${PROJECT_ROOT}/run_wrapper.sh"
    echo "   0 18 * * * cd ${PROJECT_ROOT} && python3 smart_monitor.py daily >> logs/monitor.log 2>&1"
    echo "   0 19 * * 0 cd ${PROJECT_ROOT} && python3 smart_monitor.py weekly >> logs/monitor.log 2>&1"
    echo ""
fi

echo -e "${BLUE}üíæ Sauvegardes disponibles:${NC}"
ls -la config/*.backup.* db/trading_backup_* logs_backup_* 2>/dev/null | tail -5 || echo "   (aucune sauvegarde ancienne)"

echo ""
echo -e "${GREEN}üöÄ Bot pr√™t √† √™tre relanc√© !${NC}"
echo -e "${BLUE}üìç Ex√©cut√© depuis: ${SCRIPT_DIR}${NC}"
echo -e "${BLUE}üìç Projet mis √† jour: ${PROJECT_ROOT}${NC}"

deactivate 2>/dev/null || true
