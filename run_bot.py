#!/usr/bin/env python3
"""
Enhanced Trading Bot - Version Raspberry Pi
Ex√©cution optimis√©e pour Raspberry Pi Zero W2
"""

import sys
import os
import argparse
import signal
import logging
from pathlib import Path
from datetime import datetime, timedelta
import time

# Configuration du path
sys.path.insert(0, str(Path(__file__).parent))

from src.bot import EnhancedTradingBot
from src.utils import setup_logging, validate_config, load_json_config, ensure_directories

# Variables globales pour l'arr√™t propre
graceful_shutdown = False
bot_instance = None

def signal_handler(signum, frame):
    """Gestionnaire de signal pour arr√™t propre"""
    global graceful_shutdown
    logging.getLogger(__name__).info(f"üõë Signal {signum} re√ßu, arr√™t en cours...")
    graceful_shutdown = True

def parse_arguments():
    """Parse les arguments de ligne de commande"""
    parser = argparse.ArgumentParser(description='Enhanced Trading Bot')
    parser.add_argument('--dry-run', action='store_true', 
                       help='Mode simulation - aucun ordre r√©el ne sera pass√©')
    parser.add_argument('--log-level', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'], 
                       default='INFO', help='Niveau de logging')
    parser.add_argument('--config', type=str, default='config/config.json',
                       help='Chemin vers le fichier de configuration')
    return parser.parse_args()

def check_system_resources():
    """V√©rifie les ressources syst√®me pour Raspberry Pi"""
    try:
        # V√©rifier l'espace disque
        import shutil
        total, used, free = shutil.disk_usage('/')
        free_gb = free // (1024**3)
        
        if free_gb < 1:
            logging.getLogger(__name__).warning(f"‚ö†Ô∏è  Espace disque faible: {free_gb} GB libre")
        
        # V√©rifier la m√©moire si psutil disponible
        try:
            import psutil
            memory = psutil.virtual_memory()
            if memory.percent > 85:
                logging.getLogger(__name__).warning(f"‚ö†Ô∏è  M√©moire √©lev√©e: {memory.percent:.1f}%")
        except ImportError:
            pass
            
        # Temp√©rature si disponible
        try:
            with open('/sys/class/thermal/thermal_zone0/temp', 'r') as f:
                temp = int(f.read()) / 1000.0
                if temp > 70:
                    logging.getLogger(__name__).warning(f"‚ö†Ô∏è  Temp√©rature √©lev√©e: {temp:.1f}¬∞C")
        except:
            pass
            
    except Exception as e:
        logging.getLogger(__name__).debug(f"V√©rification ressources √©chou√©e: {e}")

def cleanup_old_logs():
    """Nettoyage automatique des anciens logs"""
    try:
        log_dir = Path("logs")
        if not log_dir.exists():
            return
            
        # Supprimer les logs de plus de 15 jours
        cutoff = datetime.now() - timedelta(days=15)
        
        for log_file in log_dir.glob("*.log.*"):
            try:
                if log_file.stat().st_mtime < cutoff.timestamp():
                    log_file.unlink()
                    logging.getLogger(__name__).info(f"üóëÔ∏è  Log supprim√©: {log_file.name}")
            except Exception:
                pass
                
    except Exception as e:
        logging.getLogger(__name__).debug(f"Nettoyage logs √©chou√©: {e}")

def main():
    """Fonction principale optimis√©e Raspberry Pi"""
    global graceful_shutdown, bot_instance
    
    try:
        # Parse des arguments
        args = parse_arguments()
        
        # Configuration des signaux
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # Assurance que les r√©pertoires existent
        ensure_directories()
        
        # Configuration du logging avec rotation
        setup_logging(args.log_level, "logs")
        
        logger = logging.getLogger(__name__)
        
        # Banni√®re de d√©marrage
        mode_indicator = "üß™ SIMULATION" if args.dry_run else "üî• R√âEL"
        
        logger.info("=" * 60)
        logger.info(f"ü§ñ ENHANCED TRADING BOT - {mode_indicator}")
        logger.info(f"üçì Raspberry Pi Zero W2 Edition")
        logger.info(f"üïê D√©marrage: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("=" * 60)
        
        if args.dry_run:
            logger.warning("‚ö†Ô∏è  MODE DRY-RUN ACTIV√â - Aucun ordre r√©el ne sera pass√©")
        else:
            logger.warning("üö® MODE TRADING R√âEL - Les ordres seront ex√©cut√©s sur Binance !")
        
        # V√©rifications syst√®me
        check_system_resources()
        cleanup_old_logs()
        
        # Chargement de la configuration
        config_path = Path(args.config)
        logger.info(f"üìã Chargement configuration: {config_path}")
        
        if not config_path.exists():
            logger.error(f"‚ùå Fichier config introuvable: {config_path}")
            logger.info("üí° Copiez config.template.json vers config.json et configurez vos cl√©s API")
            sys.exit(1)
        
        config = load_json_config(str(config_path))
        validate_config(config)
        
        logger.info("‚úÖ Configuration valid√©e")
        
        # Initialisation du bot
        logger.info("üöÄ Initialisation du bot...")
        
        start_init = time.time()
        bot_instance = EnhancedTradingBot(str(config_path), dry_run=args.dry_run)
        init_time = time.time() - start_init
        
        logger.info(f"‚úÖ Bot initialis√© en {init_time:.2f}s")
        
        # Ex√©cution du cycle de trading
        logger.info("üìä D√©marrage du cycle de trading...")
        
        start_cycle = time.time()
        bot_instance.run_trading_cycle()
        cycle_time = time.time() - start_cycle
        
        logger.info(f"‚úÖ Cycle termin√© en {cycle_time:.2f}s")
        
        # Statistiques finales
        total_time = init_time + cycle_time
        logger.info(f"‚è±Ô∏è  Temps total d'ex√©cution: {total_time:.2f}s")
        
        logger.info("üèÅ Bot arr√™t√© proprement")
        
    except KeyboardInterrupt:
        logging.getLogger(__name__).info("üõë Interruption clavier d√©tect√©e")
    except Exception as e:
        logging.getLogger(__name__).error(f"‚ùå ERREUR CRITIQUE: {e}")
        import traceback
        logging.getLogger(__name__).error(traceback.format_exc())
        sys.exit(1)
    finally:
        if bot_instance:
            logging.getLogger(__name__).info("üßπ Nettoyage en cours...")

if __name__ == "__main__":
    main()
